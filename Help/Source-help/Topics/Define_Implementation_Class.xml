<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Define Implementation Class</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Define Implementation Class</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">At this point we are ready to start coding in Smalltalk (though of course Dolphin wrote some Smalltalk for us as in the last step). We begin by defining the server implementation class as a subclass of </text><text styleclass="Class Name" translate="true">COMInterfaceImp</text><text styleclass="Normal" translate="true">. If we are implementing a dual interface, derived from </text><text styleclass="Class Name" translate="true">IDispatch</text><text styleclass="Normal" translate="true">, then we normally subclass </text><text styleclass="Class Name" translate="true">AXDualImp</text><text styleclass="Normal" translate="true">, otherwise, for a custom interface derived directly from </text><text styleclass="Class Name" translate="true">IUnknown</text><text styleclass="Normal" translate="true">, we would subclass </text><text styleclass="Class Name" translate="true">COMInterfaceImp</text><text styleclass="Normal" translate="true"> directly.</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">IRandomStream</text><text styleclass="Normal" translate="true"> is a dual interface (because we want scripting clients to be able to use it), so we subclass </text><text styleclass="Class Name" translate="true">AXDualImp</text><text styleclass="Normal" translate="true">:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">AXDualImp subclass: #COMRandomStream</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">instanceVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">poolDictionaries: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classInstanceVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Bear in mind that this will not match the definition of the class in your image if it is still installed. At the moment we don</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">t know what instance variables are going to be needed to implement the component, so we haven</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">t defined any.</text></para>
    <para styleclass="Normal"><conditional-text type="IF" value="EBOOK"/><text styleclass="Normal" style="font-weight:bold;" translate="true">TODO </text><text styleclass="Normal" style="font-weight:bold;" translate="true">–</text><text styleclass="Normal" style="font-weight:bold;" translate="true"> finish build steps</text><conditional-text type="END"/></para>
  </body>
</topic>

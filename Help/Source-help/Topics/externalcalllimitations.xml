<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">External Call Limitations</title>
  <keywords>
    <keyword translate="true">External Call Limitations</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">External Call Limitations</text></para>
    </header>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Variable argument functions (those prototyped with ellipses in </text><text styleclass="Normal" translate="true">C</text><text styleclass="Normal" translate="true">, such as </text><text styleclass="Normal" style="font-style:italic;" translate="true">printf()</text><text styleclass="Normal" translate="true">) are supported in only a limited fashion (by defining multiple wrapper methods taking increasing numbers of arguments), primarily because there is no particularly neat syntax in Smalltalk for sending variable argument messages, or dynamically constructing non-literal </text><text styleclass="Normal" translate="true">Arrays</text><text styleclass="Normal" translate="true">. In the future these may be supported using an array of arguments.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">When passing structures by value (using the </text><text styleclass="Normal" style="font-style:italic;" translate="true">struct</text><text styleclass="Normal" translate="true"> parameter type), be very careful to declare the correct </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true">, and to declare the </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> correctly. When one does not an unrecoverable stack fault will almost certainly going to result and any unsaved changes will be lost.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Typed pointer arguments (i.e. </text><text styleclass="Class Name" translate="true">&lt;struct&gt;</text><text styleclass="Normal" translate="true">*</text><text styleclass="Normal" translate="true">) are not validated to be of the correct type at present, primarily for efficiency reasons. Even so it is recommended that typed pointers be used in order to correctly maintain package prerequisites, and for readability.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">fastcall</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">thiscall</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">(C++ non-virtual member function) calling conventions are not currently supported. It is possible to call these functions indirectly via another wrapper DLL that exports forwarding functions that employ either the </text><text styleclass="Normal" style="font-style:italic;" translate="true">stdcall</text><text styleclass="Normal" translate="true"> or the </text><text styleclass="Normal" style="font-style:italic;" translate="true">cdecl</text><text styleclass="Normal" translate="true"> calling convention.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Currently It is not possible to apply the </text><text styleclass="Normal" style="font-style:italic;" translate="true">virtual </text><text styleclass="Normal" translate="true">and </text><text styleclass="Normal" style="font-style:italic;" translate="true">overlap </text><text styleclass="Normal" style="font-style:normal;" translate="true">attributes to an external call in unison. In practice this means that virtual/COM calls cannot be overlapped.</text></li>
    </list>
  </body>
</topic>

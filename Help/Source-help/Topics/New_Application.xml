<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">New Application</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">New Application</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Computers are only as useful as the software that they run. Although there is a trend to make different pieces of software interact seamlessly together, it is still useful to think of software elements as separate </text><text styleclass="Program Feature" translate="true">applications</text><text styleclass="Normal" translate="true"> that can be installed and uninstalled individually. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In Dolphin, an application may be deployed as an executable (EXE) or as a package that can be imported into a development image. In either case we need to define a suitable development process.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Development of an application can be split into several stages: </text></para>
    <list id="2" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal Head" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal Head"><text styleclass="Normal Head" style="font-weight:normal; text-decoration:none;" translate="true">Creating a Package</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Dolphin supports the idea of a </text><text styleclass="Program Feature" translate="true">Package</text><text styleclass="Normal" translate="true"> for grouping together all the components of a project. When you start a new project it is expected that you will create a package to hold all the classes, globals, resources and extra methods of the project. As you develop the project the package will record all the objects of that belong to the project and which existing packages are also required for it to run successfully. Packages provide the following benefits:</text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">A package can be exported from the image for porting to another. </text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">It can aid in allowing Smalltalk code to be booked into a source code control system. </text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">If the application contained in the package is to become a standalone executable (EXE) then, once complete, the package can be deployed as such. You will need to purchase </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Dolphin_Professional_Edition" styleclass="Program Feature" translate="true">Dolphin Professional</link><text styleclass="Program Feature" translate="true">&#32;</text><text styleclass="Normal" translate="true">to create and distribute executables. </text></para>
    <list id="2" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal Head" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal Head"><text styleclass="Normal Head" style="font-weight:normal; text-decoration:none;" translate="true">Design of the Domain Models</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Much software models processes that take place in real life. Accounting systems deal with ledgers, customers, orders, invoices etc. These objects that interact in reality are often replicated in an application albeit with only enough essential function abstracted into the software to make it perform its required function. In Smalltalk, each type of object is modelled as a class. Often, additional classes that do not appear in the real world are used to bind together and enable the basic classes. Sometimes, in particularly abstruse applications, few of the classes may be taken from the real world.</text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">In any case, the classes that model the heart of an application&apos;s function are its domain model classes. Variously called </text><text styleclass="Program Feature" translate="true">Entity Models</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Program Feature" translate="true">Business Objects</text><text styleclass="Normal" translate="true"> it is most often advantageous to design and implement these domain classes first, before much attention is paid to to how a user will interact with them as part of the system. User interfaces, particualrly GUIs, can be complex as they try to offer a high bandwidth link between the user and the model objects. Enforcing the split between domain model and UI helps maintain the purity of the domain code which, after all, is the heart of the application.</text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">It is beyond the scope of this pattern language to offer advice on the mining of domain classes from a particular problem space. For small applications the choice of classes may be intuitive and obvious. For larger systems the book, </text><text styleclass="Program Feature" translate="true">Object Models: Strategies, Patterns and Application</text><text styleclass="Normal" translate="true"> by </text><text styleclass="Program Feature" translate="true">Peter Coad</text><text styleclass="Normal" translate="true"> may offer useful advice. </text></para>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Once the domain classes have been abstracted and designed each </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newclass" styleclass="Normal" translate="true">New Class</link><text styleclass="Normal" translate="true"> can be created and tested within the </text><text styleclass="Program Feature" translate="true">Class Browser</text><text styleclass="Normal" translate="true"> tool. Smalltalk provides an ideal environment for this sort of domain modelling. Because of its interactive nature, the domain classes can be instantiated and tested within a Workspace whilst being incrementally developed. Once the basic function is present concern can be given to the user interface.</text></para>
    <list id="2" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal Head" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal Head"><text styleclass="Normal Head" style="font-weight:normal; text-decoration:none;" translate="true">Design of the User Interface</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">The user interface portion of an application is responsible for interfacing the demands of a single user to the domain model objects. A number of different interface frameworks may be adopted but Dolphin proposes one, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="ModelViewPresenter" styleclass="Program Feature" translate="true">Model-View-Presenter</link><text styleclass="Normal" translate="true">, for first choice consideration. For all but the simplest applications, MVP will be a good starting point for user interface design.</text></para>
    <list id="2" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal Head" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal Head"><text styleclass="Normal Head" style="font-weight:normal; text-decoration:none;" translate="true">Deployment</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">If your application is intended to be a development tool for other Smalltalk developers to install into their images then no real effort is required to deploy it. Simply save the package contents to a file using the the </text><text styleclass="Program Feature" translate="true">Package Browser</text><text styleclass="Normal" translate="true"> and distribute the resultant PAC file to your users. More likely, you will want to deploy your application as an executable file. The EXE will contain an executable file header followed by a stripped down image with all the unused and development classes removed. &#160;You will need to purchase </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Dolphin_Professional_Edition" styleclass="Program Feature" translate="true">Dolphin Professional</link><text styleclass="Normal" translate="true"> to do this.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Consequences</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The design of an application will be significantly influenced by a fundamental design choice; whether the application is to be standalone or whether it is to follow a client/server model. In the former case, the design is relatively straightforward with the models in the MVP triad generally being actual domain model objects. For client/server applications the design is more complex due to a number of considerations: </text></para>
    <list id="3" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Normal" translate="true">The server must support multiple clients. Therefore the domain models must be wrapped to be re-entrant and </text><link displaytype="text" defaultstyle="true" type="topiclink" href="processsafeclass" styleclass="Normal" translate="true">Process Safe</link><text styleclass="Normal" translate="true"> and additional code must be written to manage the client sessions. Often the session handling can be implemented as part of a facade onto the domain classes but more complex scalable systems may make use of Corba or COM to manage the session traffic and to broker the domain objects. </text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">The MVP model objects in the user interface will not necessarily be of the same class as the domain models. They will almost certainly not be the identical objects to those in the domain, due to the need to transfer the information across the client/server link. Depending on the implementation of the link they may be Proxies onto the original domain models or they may be Adapter classes that wrap them. </text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">In general, using a set of adapted classes for the MVP models rather than the real domain classes can be useful for issues such as validation. Most domain models don&apos;t need to, and therefore shouldn&apos;t, perform validation in a client/server system since at the server side the objects can assume they were born healthy. The user interface exposes it&apos;s models to the vagaries of the human user and validation is therefore important. This can be shared around the MVP triad but model level validation will require extra code not present in the real domain object classes. Hence new model classes will often be required in the user interface that wrap and adapt the interface to the domain classes. </text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Creating_an_Application" styleclass="Normal" translate="true">Creating a GUI Application</link><text styleclass="Normal" translate="true"> tutorial follows much of the above process to describe the implementation of a standalone personal accounts application, </text><text styleclass="Program Feature" translate="true">Personal Money</text><text styleclass="Normal" translate="true">.</text></para>
  </body>
</topic>

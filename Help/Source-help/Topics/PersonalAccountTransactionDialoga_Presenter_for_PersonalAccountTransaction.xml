<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">PersonalAccountTransactionDialog:a Presenter for PersonalAccountTransaction</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">PersonalAccountTransactionDialog: a Presenter for PersonalAccountTransaction</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We now want to create a presenter that handles modal editing of </text><text styleclass="Class Name" translate="true">PersonalAccountTransaction</text><text styleclass="Normal" translate="true"> instances. The abstract classes </text><text styleclass="Class Name" translate="true">Dialog</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">ValueDialog</text><text styleclass="Normal" translate="true"> are suitable superclasses for this kind of modal editing. Both provide the ability to buffer the edit changes until the dialog is confirmed, usually by pressing an </text><text styleclass="Menu Command" translate="true">OK</text><text styleclass="Normal" translate="true"> button. </text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: choose to subclass from </text><text styleclass="Notes" style="font-style:italic;" translate="true">Dialog</text><text styleclass="Notes" translate="true"> if the model you are editing is mutable, that is, you are expecting to change the contents of the object in place. Often, however, you will be dealing with an immutable object which should not be modified directly. In such cases create your new class beneath </text><text styleclass="Notes" style="font-style:italic;" translate="true">ValueDialog</text><text styleclass="Notes" translate="true"> and the standard </text><text styleclass="Notes" style="font-style:italic;" translate="true">#value </text><text styleclass="Notes" translate="true">protocol will be used to fetch the initial value for editing and to set the resultant value back into the model. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For our </text><text styleclass="Class Name" translate="true">PersonalAccountTransactionDialog</text><text styleclass="Normal" translate="true"> we&apos;ll choose to edit the contents of an existing instance, ie we&apos;ll subclass </text><text styleclass="Class Name" translate="true">Dialog</text><text styleclass="Normal" translate="true"> to do this.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Dialog subclass: #PersonalAccountTransactionDialog</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">instanceVariableNames: &apos;datePresenter amountPresenter descriptionPresenter isDebitPresenter &apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">poolDictionaries: &apos;&apos;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Write the </text><text styleclass="Class Name" translate="true">createComponents</text><text styleclass="Normal" translate="true"> method to create the sub-presenters that are needed to edit a transaction model and then the model: method that connects these to the various aspects of the transaction. </text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">createComponents</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Private - Create the presenters contained by the receiver&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">super createComponents.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">datePresenter := self add: DatePresenter new name: &apos;date&apos;.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">amountPresenter := self add: NumberPresenter new name: &apos;amount&apos;.</text><tab /></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">descriptionPresenter := self add: TextPresenter new name: &apos;description&apos;.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">isDebitPresenter := self add: BooleanPresenter new name: &apos;isDebit&apos;.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">model: aPersonalAccountTransaction</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Set the model associated with the receiver.&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">| aspectBuffer |</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">super model: aPersonalAccountTransaction.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">aspectBuffer := self model.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">datePresenter model: (aspectBuffer aspectValue: #date).</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">amountPresenter model: (aspectBuffer aspectValue: #amount).</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">descriptionPresenter model: (aspectBuffer aspectValue: #description).</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">isDebitPresenter model: (aspectBuffer aspectValue: #isDebit).</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: note that the model being assigned here is not a direct instance of </text><text styleclass="Notes" style="font-style:italic;" translate="true">PersonalAccountTransaction</text><text styleclass="Notes" translate="true"> as we might expect, but instead it is an instance of the class </text><text styleclass="Notes" style="font-style:italic;" translate="true">AspectBuffer</text><text styleclass="Notes" translate="true">. This is created automatically by the </text><text styleclass="Notes" style="font-style:italic;" translate="true">Dialog</text><text styleclass="Notes" translate="true"> framework to wrap the true subject model so that changes to it are buffered until they are explicitly applied back. For the most part, the aspect buffer can be treated in much the same way as the true subject model would have been, especially when requesting </text><text styleclass="Notes" style="font-style:italic;" translate="true">ValueAspectAdaptors</text><text styleclass="Notes" translate="true"> onto its various aspects using </text><text styleclass="Notes" style="font-style:italic;" translate="true">#aspectValue</text><text styleclass="Notes" translate="true">:.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Add the </text><text styleclass="Class Name" translate="true">defaultModel</text><text styleclass="Normal" translate="true"> class method to indicate that this presenter should have an instance of </text><text styleclass="Class Name" translate="true">PersonalAccountTransaction</text><text styleclass="Normal" translate="true"> as its model by default. Once again, there is no need to override the </text><text styleclass="Class Name" translate="true">defaultView</text><text styleclass="Normal" translate="true"> method providing we ensure that the view is saved under the name &quot;Default view&quot;.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">defaultModel</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Answer a default model to be assigned to the receiver when it</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">is initialized.&quot;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">^PersonalAccountTransaction new</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This is all the code we need to write to implement the PersonalAccountTransactionDialog. However, we can now go back to PersonalAccountShell and add the missing methods for newTransaction and editTransaction theat we provided stubs for earlier.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">newTransaction</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Prompt for a new transaction and add it to the receiver&apos;s model&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">| newTransaction |</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">(newTransaction := PersonalAccountTransactionDialog showModal) </text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">notNil ifTrue: [</text></para>
    <para styleclass="Code Example"><tab /><tab /><tab /><text styleclass="Code Example" translate="true">self model addTransaction: newTransaction.</text></para>
    <para styleclass="Code Example"><tab /><tab /><tab /><text styleclass="Code Example" translate="true">self selectedTransactionOrNil: newTransaction ]</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Notice that, here, we are relying on the </text><text styleclass="Class Name" translate="true">PersonalAccountTransactionDialog</text><text styleclass="Normal" translate="true"> creating and editing a default model (that specified by the </text><text styleclass="Class Name" translate="true">defaultModel</text><text styleclass="Normal" translate="true"> class method). The resultant transaction object will be answered from </text><text styleclass="Class Name" translate="true">showModal</text><text styleclass="Normal" translate="true"> if </text><text styleclass="Menu Command" translate="true">OK</text><text styleclass="Normal" translate="true"> is pressed, otherwise nil will be answered if </text><text styleclass="Menu Command" translate="true">Cancel</text><text styleclass="Normal" translate="true"> is pressed. </text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">editTransaction</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Edit the selected transaction&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">| transaction |</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">transaction := self selectedTransactionOrNil.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">transaction notNil ifTrue: [</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">self model removeTransaction: transaction.</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">PersonalAccountTransactionDialog showModalOn: transaction.</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">self model addTransaction: transaction.</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">self selectedTransactionOrNil: transaction ]</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In this case we are editing an existing selected transaction. The transaction is removed temporarily from the account and a </text><text styleclass="Class Name" translate="true">PersonalAccountTransactionDialog</text><text styleclass="Normal" translate="true"> is created and shown with this as its model. The dialog displays a copy of the model and any changes made are only written back to it if the dialog is confirmed. Otherwise, the original transaction object is left untouched. The resultant transaction is then added back into the account which causes the account balance to be updated appropriately.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: there are a number of instance creation methods in the </text><text styleclass="Notes" style="font-style:italic;" translate="true">Presenter</text><text styleclass="Notes" translate="true"> class that help you create presenters in a variety of different ways. You should review these to know what&apos;s available; look at the class methods of </text><text styleclass="Notes" style="font-style:italic;" translate="true">Presenter</text><text styleclass="Notes" translate="true"> in the &quot;instance creation&quot; category.</text></para>
  </body>
</topic>

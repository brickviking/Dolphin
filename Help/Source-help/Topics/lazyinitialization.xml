<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Lazy Initialization</title>
  <keywords>
    <keyword translate="true">Lazy Initialization</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Lazy Initialization</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">During </text><link displaytype="text" defaultstyle="true" type="topiclink" href="instanceinitialization" styleclass="Normal" translate="true">Instance Initialization</link><text styleclass="Normal" translate="true"> or </text><link displaytype="text" defaultstyle="true" type="topiclink" href="classinitialization" styleclass="Normal" translate="true">Class Initialization</link><text styleclass="Normal" translate="true">, some instance variables can be costly to initialize (either in terms of memory or time) and, indeed, they may never be used. Is it possible to minimise this penalty?</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">One method is to initialize the instance variable on demand rather than during instance initialization. To do this, modify the getter accessor method, so that the variable is initialized the first time it is accessed. We know the variable is being accessed for the first time if its value is still nil.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Examples</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Imagine a class </text><text styleclass="Class Name" translate="true">AudioCD</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">which represents an audio compact disc. One of its instance variables is the list of tracks on the CD. This information can be obtained from the CD, but it is a slow operation. Using lazy initialization, we can delay querying the track information until we are actually asked for it.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">tracks</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer the tracks.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;tracks isNil ifTrue: [ tracks := self queryTracks ].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^tracks</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">GraphicsTool</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">is an abstract class containing code common to Windows GDI objects (pens, brushes etc). It defines an instance variable called </text><text styleclass="Class Name" translate="true">handle</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">which can be expensive to initialize and may not be required. It is therefore initialized lazily.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">handle</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer the receiver&apos;s handle. If unrealized then attempt to realize it first.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;handle isNil ifTrue: [self realize].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;^handle</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note: </text><text styleclass="Class Name" translate="true">GraphicsTool&gt;&gt;realize</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">assigns to the handle instance variable.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Consequences</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For this technique to work, there should be no direct access of the lazy variable. Direct access to the lazy variable would bypass the &apos;initialize on first access&apos; code.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The main disadvantage of lazy initialization is the time penalty associated with each access of the variable caused by the #</text><text styleclass="Class Name" translate="true">isNil</text><text styleclass="Normal" translate="true"> test. Another disadvantage is that the initialization code is spread around the class and occurs at an unspecified time. On occasion, this can lead to confusion.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Lazy initialization should only be used if (1a) the initialization of the instance variable would take a long time, or (1b) consume a significant amount of resources </text><text styleclass="Normal" translate="true">and</text><text styleclass="Normal" translate="true"> (2) there is a good chance the variable will not be used.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="singleton" styleclass="Normal" translate="true">Singleton</link></para>
  </body>
</topic>

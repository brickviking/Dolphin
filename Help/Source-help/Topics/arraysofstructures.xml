<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Arrays of Structures</title>
  <keywords>
    <keyword translate="true">Arrays of Structures</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Arrays of Structures</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Homogeneous. arrays of </text><text styleclass="Class Name" translate="true">ExternalStructures</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">can be represented in Dolphin by instances of the generic </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class. </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">implements the Smalltalk collection protocols such that when one accesses the elements one gets an instance of the appropriate </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> class that references the appropriate area of storage in the </text><text styleclass="Class Name" translate="true">Structur</text><text styleclass="Normal" translate="true">eArray</text><text styleclass="Normal" translate="true">, and which can therefore be used to read or update the values there. For example the </text><text styleclass="Normal" translate="true">Canvas </text><text styleclass="Normal" translate="true">method to draw polygons needs to pass an array of </text><text styleclass="Class Name" translate="true">POINTs</text><text styleclass="Normal" translate="true"> to a GDI function, and so it uses a </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true"> to convert from a Smalltalk collection to a properly formatted memory block containing the same values:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">polygon: collectionOfPoints</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Draw a filled polygon from the collection of points.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;| points count |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;count := collectionOfPoints size.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;points := StructureArray length: count elementClass: POINTL.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;points with: collectionOfPoints do: [:pointl :point | pointl x: point x; y: point y].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^GDILibrary default</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;polygon: self asParameter</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;lpPoints: points</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;nCount: count</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Toolbar </text><text styleclass="Normal" translate="true">uses a </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">of </text><text styleclass="Class Name" translate="true">TBBUTTON</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">to add buttons to a Windows toolbar control in a similar fashion in its </text><text styleclass="Class Name" translate="true">#basicAddItems</text><text styleclass="Normal" translate="true">: method.</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">StructureArrays</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">are commonly used to access embedded arrays of structures in other structures. For example from </text><text styleclass="Class Name" translate="true">LOGPALETTE</text><text styleclass="Normal" translate="true"> (which describes a Windows palette):</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">palPalEntry</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer the receiver&apos;s palPalEntry field as a Smalltalk object.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^StructureArray fromAddress: (bytes yourAddress + 4) length: 256 elementClass: PALETTEENTRY</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">There are many other examples of the use of </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">in the image, often associated with the </text><text styleclass="Class Name" translate="true">StructureArrayField</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">field type.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">StructureArray Performance</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true"> is actually generic enough to fulfil the roles of the scalar value array classes. For example we could represent a </text><text styleclass="Class Name" translate="true">DWORDArray</text><text styleclass="Normal" translate="true"> by constructing a </text><text styleclass="Class Name" translate="true">StructureArray</text><text styleclass="Normal" translate="true"> with </text><text styleclass="Class Name" translate="true">DWORDs</text><text styleclass="Normal" translate="true"> as the element class. Although not quite the same thing (the elements are enumerated or accessed as </text><text styleclass="Class Name" translate="true">DWORDs</text><text styleclass="Normal" translate="true"> rather than as Smalltalk Integers) it would do the job. Apart from the fact that this would be less convenient, performance would also suffer. Accessing the elements of </text><text styleclass="Class Name" translate="true">StructureArrays</text><text styleclass="Normal" translate="true">, or enumerating them, is quite slow because an </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> instance has to be constructed to represent each element, which is expensive. Also the calculation to work out the offsets of each element is more complex than required for a single case, and must take account of packing and alignment issues that would generally be hard-wired into the offset calculation for a specific case. Consequently, if performance is an issue, one should consider adding a specialized </text><text styleclass="Class Name" translate="true">ExternalArray</text><text styleclass="Normal" translate="true"> type to represent arrays of a particular structure type.</text></para>
  </body>
</topic>

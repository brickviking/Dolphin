<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Marshalling</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Marshalling</text></para>
    </header>
    <para></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Marshalling is the process by which COM orchestrates the transfer of data and correctly synchronised invocation of &quot;remote&quot; methods. This may involve moving data and object references between address spaces, and also performing cross-thread calls safely and correctly.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Dolphin is capable of creating COM server components that run either in-process (.DLL) or out-of-process (.EXE). When running out-of-process the components are running in a separate process, and must therefore be on a separate thread and in a separate address space. Dolphin&apos;s in-process components run within the same address space as the client, but are limited to the single-threaded apartment model and will always run on a separate thread. This means that in both cases marshalling support is required for the component&apos;s interfaces in order that COM can both synchronize interaction between the client and server threads, and to transfer data between address spaces where needed. So before one can attempt any use (or debugging) of a Dolphin COM component in conjunction with an external client one must first ensure that appropriate marshalling support is registered for the component</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s interfaces. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Marshalling can be provided in a number of ways (including a component taking responsibility for its own marshalling by implementing the </text><text styleclass="Class Name" translate="true">IMarshal</text><text styleclass="Normal" translate="true"> interface, which is referred to as Custom Marshalling), but typically it is built directly or indirectly from the outputs of the MIDL compiler when run against the IDL definition of the component. </text><text styleclass="Program Feature" translate="true">MIDL</text><text styleclass="Normal" translate="true"> output can provide either </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Type-library_Marshalling" styleclass="Normal" translate="true">type-library marshalling</link><text styleclass="Normal" translate="true">, or </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Standard_Marshalling" styleclass="Normal" translate="true">standard proxy/stub marshalling</link><text styleclass="Normal" translate="true">.</text></para>
  </body>
</topic>

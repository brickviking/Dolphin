<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Asking the questions</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Asking the questions</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When a game is in progress much of the action will be to do with the computer asking you questions. As the game traces through the knowledge tree, at any particular time it will be looking at either a </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> node or, if it thinks it knows what the animal is, an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> node. Do you remember how you traced through a possible game scenario in the original diagram? If so, you&apos;ll see how the computer must pose a question to the human player at each stage. For example:</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">&quot;Does it have wings?&quot; - for a </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> object or</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">&quot;Are you thinking of an Eagle?&quot; - for an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> object. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Now the interesting thing here is that we can write the game so that it does not need to be aware of what type of node it is dealing with at any one time. It can go around just sending an </text><text styleclass="Class Name" translate="true">#ask</text><text styleclass="Normal" translate="true"> (say) message to each node that it comes across and, providing we implement a suitable </text><text styleclass="Class Name" translate="true">#ask</text><text styleclass="Normal" translate="true"> method in each of the </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> classes everything should operate just fine. As it turns out, specifying object behaviour in this way is a fundamental part of object-oriented programming. We call this </text><text styleclass="Class Name" translate="true">Polymorphism</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Class Name" translate="true">Polymorphic</text><text styleclass="Normal" translate="true"> behaviour. The key thing is that different classes of object can respond to the same method in different ways. This is great because it means that the sender need not be concerned about what type of object the receiver is, merely that it responds appropriately to the message being sent.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">So let&apos;s add our polymorphic (it&apos;s a great word that) </text><text styleclass="Class Name" translate="true">#ask</text><text styleclass="Normal" translate="true"> methods to </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true">. Place them in the </text><text styleclass="Class Name" translate="true">operations</text><text styleclass="Normal" translate="true"> category.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Question&gt;&gt;ask</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Ask the receiver&apos;s question and continue the game appropriately depending on the</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">answer that is received&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">(MessageBox confirm: self displayString caption: &apos;The animal you&apos;&apos;re thinking of...&apos;)</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">ifTrue: [ self yes ask ]</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">ifFalse: [ self no ask ].</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: Note the double quote &apos;&apos; marks used to obtain a single quote character within the caption text string. You must use these to indicate to the Smalltalk compiler that the string is not actually to be terminated at this point. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In the above method we are using a </text><text styleclass="Class Name" translate="true">MessageBox</text><text styleclass="Normal" translate="true"> to put up a simple dialog displaying the question text together with a suitable caption and a couple of buttons to allow the player to answer yes or no. Hopefully, you can now see how the game logic follows the </text><text styleclass="Class Name" translate="true">yes</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Class Name" translate="true">no</text><text styleclass="Normal" translate="true"> branches in the knowledge tree based on the player&apos;s answer to the question.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Next is the </text><text styleclass="Class Name" translate="true">Animal&gt;&gt;ask</text><text styleclass="Normal" translate="true"> method. When this is called, the computer thinks it has a sensible guess for the animal (at least it has no more questions to ask anyway). Consequently, it must ask if the guess is correct and, if so it wins the game. If not, it prompts for a new </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> to be created with the real answer and for a new </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> that will distinguish this from the original guess. You&apos;ll notice that there are some new messages being sent for which we have not yet designed the methods but, don&apos;t worry, we&apos;ll get to these in just a moment.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Animal&gt;&gt;ask</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Ask whether the receiver is the animal that the player is thinking of.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">If it is then the game is over. If it is not then prompt for the true answer</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">and install it and a question which will distinguish this new animal from</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">the receiver. This allows the game to learn.&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">| newAnimal newQuestion |</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">(MessageBox confirm: (&apos;Are you thinking of &apos;, self displayString, &apos;?&apos;))</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">ifTrue: [ MessageBox notify: &apos;I guessed your animal correctly.&apos; caption: &apos;GREAT, I WIN&apos; ]</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">ifFalse: [ newAnimal := Animal prompt. </text></para>
    <para styleclass="Code Example"><tab /><tab /><tab /><text styleclass="Code Example" translate="true">newQuestion := Question promptToDistinguish: self from: newAnimal ].</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">(MessageBox confirm: &apos;Do you wish to play again?&apos; caption: &apos;I&apos;&apos;m, getting better all the time...&apos;)</text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">ifTrue: [ Animal playGame ].</text></para>
    <para styleclass="Code Example"></para>
  </body>
</topic>

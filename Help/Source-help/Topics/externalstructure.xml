<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">ExternalStructure</title>
  <keywords>
    <keyword translate="true">ExternalStructure</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">ExternalStructure</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">All of the data types intended for interfacing with the outside world from Dolphin are subclasses of </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true">, This applies to scalar, usually 32-bit, values, as well as &quot;structures&quot;. The contents of an </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> are represented with an object that understands the </text><text styleclass="Normal" translate="true">external bytes </text><text styleclass="Normal" translate="true">protocol (e.g. </text><text styleclass="Class Name" translate="true">ByteArray</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true">). The </text><text styleclass="Normal" translate="true">external bytes </text><text styleclass="Normal" translate="true">protocol includes a number of primitive operations for accessing the native machine representations of fundamental types such as signed and unsigned 32-bit integers, and double precision floats, at specified offsets. For example, given an 8 byte </text><text styleclass="Class Name" translate="true">ByteArray</text><text styleclass="Normal" translate="true">, if one sends it </text><text styleclass="Class Name" translate="true">#dwordAtOffset</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> with the argument 4, then it would answer the 32-bit unsigned integer value stored from offset 4 to offset 7 inclusive.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The external bytes protocol has primitive accessors for 32-bit signed and unsigned integers, 16-bit signed and unsigned integers, unsigned bytes, 64-bit floating point numbers, 32-bit floating pointer numbers, strings, etc. Using these primitive accessors it is possible to hand code a structure class that provides higher-level accessors for each field. However this is a very tedious and error prone process, because it involves a lot of typing, and one has to work out the correct field offsets by hand. In addition one has to code a method for each field to which access is required, even when one would rather not have all those methods clanking around in the image.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Structure Templates</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In order to largely automate the process of defining external structures, every </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">subclass can have a template defined that specifies symbolic names and type descriptors for each field in the corresponding structure. The template definition is stored in the </text><text styleclass="Class Name" translate="true">#defineTemplate</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class method. A simple example is </text><text styleclass="Class Name" translate="true">POINTL</text><text styleclass="Normal" translate="true"> (the Dolphin structure to represent the Windows™ </text><text styleclass="Class Name" translate="true">POINTL</text><text styleclass="Normal" translate="true"> structure):</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">defineFields</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Define the fields of the Win32 POINTL structure.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;POINTL compileDefinition</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;defineField: #x type: SDWORDField new;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;defineField: #y type: SDWORDField new</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Here we&apos;ve said that Windows™ </text><text styleclass="Class Name" translate="true">POINTLs</text><text styleclass="Normal" translate="true"> contain a pair of signed 32-bit integer coordinates, which they do!</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Having defined structure, we can then start to use it immediately by using the field names defined in the template as message selectors (e.g. to get the </text><text styleclass="Normal" translate="true">x</text><text styleclass="Normal" translate="true"> coordinate of a </text><text styleclass="Class Name" translate="true">POINTL</text><text styleclass="Normal" translate="true"> we would simply send it </text><text styleclass="Normal" translate="true">#x</text><text styleclass="Normal" translate="true">, and to set it, </text><text styleclass="Normal" translate="true">#x:</text><text styleclass="Normal" translate="true">). The </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">infrastructure will take care of lazily initializing the template so that it knows the layout and size of the structure. We can also embed structures inside other structures without worrying about the initialization order. However, unless we compile the structure definition explicitly, then we will not get optimum performance since the fields will be accessed dynamically.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Structures can be compiled for optimum performance by sending them the </text><text styleclass="Class Name" translate="true">#compileDefinition</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">method, and this will automatically generate a set of correctly defined accessor methods (assuming that one has managed to code the </text><text styleclass="Class Name" translate="true">#defineTemplate</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">method correctly, which is most easily achieved by following the countless examples in the base image). Compiled structures do occupy more space in the image, so infrequently used structures are best left uncompiled.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If we hadn&apos;t required read and/or write access to all the fields of </text><text styleclass="Class Name" translate="true">POINTL</text><text styleclass="Normal" translate="true">, then we could have </text><link displaytype="text" defaultstyle="true" type="topiclink" href="restrictingfieldaccess" styleclass="Normal" translate="true">restricted the access</link><text styleclass="Normal" translate="true"> available to specific fields to read only, write only, or no access (filler).</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">In-process Start Up Sequence</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">In-process Start Up Sequence</text></para>
    </header>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Client calls </text><text styleclass="Class Name" translate="true">CoCreateInstance</text><text styleclass="Normal" translate="true">() (or </text><text styleclass="Class Name" translate="true">IClassFactory::CreateInstance</text><text styleclass="Normal" translate="true">()) with </text><text styleclass="Class Name" translate="true">CLSCTX_INPROC_SERVER</text><text styleclass="Normal" translate="true"> context flag.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">COM looks up component</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true"> entry in the registry and uses its </text><text styleclass="Class Name" translate="true">InProcServer32</text><text styleclass="Normal" translate="true"> sub-key to find the path of the server DLL to load.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">COM loads the DLL into the client process (</text><text styleclass="Class Name" translate="true">CoLoadLibrary</text><text styleclass="Normal" translate="true">())</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">COM locates (</text><text styleclass="Class Name" translate="true">GetProcAddress</text><text styleclass="Normal" translate="true">()) and calls the </text><text styleclass="Class Name" translate="true">DllGetClassObject</text><text styleclass="Normal" translate="true">() entry point in the DLL, passing it the </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true"> of the component requested by the client.</text></li>
      <li styleclass="Normal"><text styleclass="Program Feature" translate="true">IPDolphin.DLL</text><text styleclass="Normal" translate="true"> looks up the requested </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true"> in the registry and extracts its Image sub-key to use as the path of the image to load.</text></li>
      <li styleclass="Normal"><text styleclass="Program Feature" translate="true">IPDolphin.DLL</text><text styleclass="Normal" translate="true"> creates a Dolphin VM and asks it to load the image.</text></li>
      <li styleclass="Normal"><text styleclass="Program Feature" translate="true">IPDolphin.DLL</text><text styleclass="Normal" translate="true"> fires up the image and establishes bilateral communication between running image and launcher stub (see </text><text styleclass="Class Name" translate="true">IPDolphin&gt;&gt;onStartup</text><text styleclass="Normal" translate="true">).</text></li>
      <li styleclass="Normal"><text styleclass="Program Feature" translate="true">IPDolphin.DLL</text><text styleclass="Normal" translate="true"> invokes </text><text styleclass="Class Name" translate="true">IPDolphin&gt;&gt;GetClassObject:riid:ppv</text><text styleclass="Normal" translate="true">:, finally forwarding the </text><text styleclass="Class Name" translate="true">DllGetClassObject</text><text styleclass="Normal" translate="true">() call from COM.</text></li>
      <li styleclass="Normal"><text styleclass="Class Name" translate="true">IPDolphin&gt;&gt;GetClassObject:riid:ppv:</text><text styleclass="Normal" translate="true"> looks up the requested </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true">, and if a matching class is registered in the image it answers the requested interface (probably </text><text styleclass="Class Name" translate="true">IClassFactory</text><text styleclass="Normal" translate="true">) on a new </text><text styleclass="Class Name" translate="true">COMClassFactory</text><text styleclass="Normal" translate="true"> instance configured to create instances of the registered Smalltalk class.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">COM (or the client directly) calls I</text><text styleclass="Class Name" translate="true">ClassFactory&gt;&gt;CreateInstance</text><text styleclass="Normal" translate="true">(), implemented directly in the image (see </text><text styleclass="Class Name" translate="true">COMClassFactory&gt;&gt;CreateInstance:riid:ppvObject:</text><text styleclass="Normal" translate="true">), which creates a new instance of the Smalltalk class that implements the COM component, and queries off the desired interface.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">If no errors have occurred the interface pointer is returned to the client. In order to return the interface COM must “marshal” the interface pointer into the client</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s apartment, so failure is still possible, even at this late stage, if marshalling code is not available for the interface.</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Assuming there were no errors, and the interface could be marshalled, the client should now be in possession of an interface pointer of the type it requested onto an instance of the component it requested. The client can now use this interface pointer to directly invoke the methods of COM object.</text></li>
    </list>
  </body>
</topic>

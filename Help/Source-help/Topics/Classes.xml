<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Classes</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Classes</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Let&apos;s ask a few objects what class they are. Open a fresh </text><text styleclass="Program Feature" translate="true">workspace</text><text styleclass="Normal" translate="true"> and evaluate the following expressions, displaying the results:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&apos;This is a string&apos;.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">#(7 &apos;abc&apos; 6.15)</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">4 @ 5.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Okay, so we&apos;ve seen that the objects above are classified as a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true">, an </text><text styleclass="Class Name" translate="true">Array</text><text styleclass="Normal" translate="true"> and a </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true"> respectively. Now the interesting thing here is that the classes </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">Array</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true"> are also objects too (remember everything is an object in Smalltalk). The fact that class objects have names that begin with an upper case letter should, perhaps, indicate to you that these objects are held in global variables. There are around 600 classes in the basic Dolphin image so there are this number of different types of object, all with different behaviours. Naturally, this number will grow as you program new classes for yourself.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Every object is associated with a particular class. In Smalltalk programs we say that every object is an &quot;instance&quot; of its class. This means that </text><text styleclass="Class Name" translate="true">&apos;hello&apos;</text><text styleclass="Normal" translate="true"> is an instance of </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">4 @ 5</text><text styleclass="Normal" translate="true"> is an instance of </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Question: if a class describes the behaviour of its objects and yet a class is also an object, what describes the behaviour of a class? What is a class object an instance of? The answer is a metaclass. I&apos;m afraid that metaclasses are beyond the level of our current discussion but they are intriguing. Indeed, many computer scientists would consider them to be one of the most intriguing aspects of Smalltalk but, for more information, you&apos;ll have to research this for yourself!</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">So what do class objects actually do and what do they contain?</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">One thing classes do is to describe the layout of data in their instances. Most objects have to hold information about their state and they do this using </text><text styleclass="Program Feature" translate="true">instance variables</text><text styleclass="Normal" translate="true">. We&apos;ll learn more about instance variables in a moment but for now, suffice it to say that it is the responsibility of a class object to define the number and names of these variables in its instances. You can find out what instance variables are required by an object by sending the message </text><text styleclass="Class Name" translate="true">#allInstVarNames</text><text styleclass="Normal" translate="true"> to its class. Try:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Point allInstVarNames.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This answers an array of strings showing the instance variable names for all </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true"> objects. As you might expect, a </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true"> (which represents a point on a two dimensional Cartesian plane) has variable slots for its x and y co-ordinates.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Another thing that classes do is to hold onto pieces of Smalltalk code called </text><text styleclass="Program Feature" translate="true">methods</text><text styleclass="Normal" translate="true"> that describe how instances respond to individual messages. You can query a class to determine what message selectors its instances will respond to. Try displaying the results of:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Point allSelectors.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Point respondsTo: #&lt;=.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">(4 @ 5) respondsTo: #&lt;=.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Once you know that a class supports a particular message then you can also ask to see the code for the method that implements the message. Let&apos;s take a look at the Smalltalk code that handles the comparison of two points:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">(Point compiledMethodAt: #&lt;=) getSource.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The important thing to note here is not so much the code itself, but the fact that Smalltalk objects can be so introspective. You can send them messages to do many things, including asking them to describe how they actually work. This is another important aspect of Smalltalk and is often called </text><text styleclass="Program Feature" translate="true">reflection</text><text styleclass="Normal" translate="true"> since objects have the ability to reflect upon their own behaviour.</text></para>
  </body>
</topic>

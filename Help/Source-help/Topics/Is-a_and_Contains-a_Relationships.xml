<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Is-a and Contains-a Relationships</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Is-a and Contains-a Relationships</text></para>
    </header>
    <para style="margin-top:7px; margin-bottom:7px;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true">So, back to</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Class Name" translate="true">Animal</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">.</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> Where in the class hierarchy should we choose to create this class? The first thing to consider is what sort of information will each instance of</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Class Name" translate="true">Animal</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> hold. Looking at the knowledge base diagram above we can see that each animal must at least know its name; i.e. what sort of animal it is. This will be in the form of a Smalltalk text </text><text styleclass="Class Name" translate="true">String</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> such as: &apos;Dog&apos;, &apos;Cat&apos;, &apos;Horse&apos; etc. So, a possible location in the class hierarchy that we might consider would be to make</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Class Name" translate="true">Animal</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> a subclass of</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Class Name" translate="true">String</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true">.</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true">To look at this decision in more detail, find the</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Class Name" translate="true">String</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> class in the </text><text styleclass="Program Feature" translate="true">Class &#160;Browser</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true"> (remember you can do this using the</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Program Feature" translate="true">Go Search</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text styleclass="Normal" translate="true">bar</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true">) and take a look at the methods that are defined for all </text><text styleclass="Class Name" translate="true">Strings</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; font-style:italic; color:#000000;" translate="true">.</text></para>
    <para styleclass="Normal"><image src="CHB_StringMethods.png" scale="100.00%" styleclass="Normal"></image><br/><text styleclass="Normal" translate="true">If we make our </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> class a subclass of </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> then we will inherit all of these methods. This may, or may not, be what we want. Think about it; does it make sense for an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> to understand messages such as #</text><text styleclass="Class Name" translate="true">&gt;=</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">#asNumber</text><text styleclass="Normal" translate="true"> etc? No, not really!</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">What we should actually be asking is whether an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> &quot;is a&quot; </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> or whether it, in fact, should &quot;contain a&quot; </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true">. This is one of the fundamental decisions that software designers make when they are performing an &quot;object oriented analysis&quot; on a design problem. Often a problem is complex enough that it is worth drawing a diagram of the object model and this will illustrate the relationships between the various objects in the system. The relationships are often described as </text><text styleclass="Program Feature" translate="true">Is-a</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Program Feature" translate="true">Contains-a</text><text styleclass="Normal" translate="true"> relationships.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">It is my suggestion, therefore, that an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> should contain a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> and not be a subclass of one. So, we still haven&apos;t yet decided exactly where </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> should be subclassed in the overall hierarchy. In these situations it is best just to start off with your class being a direct subclass of </text><text styleclass="Class Name" translate="true">Object</text><text styleclass="Normal" translate="true"> (it is to represent an object after all). This is a very good default starting point. The great thing about Smalltalk is that, if you should later discover that there is a more suitable superclass somewhere in the image, then it is really easy to refactor and move your class to this new location in the hierarchy.</text></para>
  </body>
</topic>

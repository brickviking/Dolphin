<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Method Name</title>
  <keywords>
    <keyword translate="true">Method Name</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Method Name</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When creating a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newmethod" styleclass="Normal" translate="true">New Method</link><text styleclass="Normal" translate="true">, the choice of a good selector name and the names of the parameters will promote the understanding of the method&apos;s purpose. It will also improve the readability of the method source and that of the methods which call it.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Choose a selector name which communicates what the method will do, </text><text styleclass="Normal" translate="true">not</text><text styleclass="Normal" translate="true"> how it will do it. Avoid including any information about the implementation details.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Method names should always begin with a lowercase letter. If the name contains more than one word, then use </text><link displaytype="text" defaultstyle="true" type="topiclink" href="wordcapitalization" styleclass="Normal" translate="true">Word Capitalization</link><text styleclass="Normal" translate="true"> to form the name. The exception to this is when a method takes more than one parameter - each component of the method name which follows a parameter should start with a lowercase letter.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The method name should read as a description of what to do with the parameters being passed eg. </text><text styleclass="Class Name" translate="true">#at:put:</text><text styleclass="Normal" translate="true">. Often, the parameter names can supply the type of the parameter and be of the form </text><text styleclass="Class Name" translate="true">anInteger</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">aCharacter</text><text styleclass="Normal" translate="true"> etc. You should end up with a method header which reads as a sentence:</text></para>
    <para styleclass="Class Name"><text styleclass="Class Name" translate="true">#at: anInteger put: aCharacter</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If there is more than one parameter of the same type, then the names should include further information to differentiate between them:</text></para>
    <para styleclass="Class Name"><text styleclass="Class Name" translate="true">#from: startInteger to: stopInteger</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In addition to the above guidelines, there is an informal convention for naming certain types of method.</text></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Initialization Methods</text><br/><text styleclass="Normal" translate="true">use </text><text styleclass="Class Name" translate="true">#initialize</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">for an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="instanceinitialization" styleclass="Normal" translate="true">Instance Initialisation</link><text styleclass="Normal" translate="true"> method.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Accessor Methods</text><br/><text styleclass="Normal" translate="true">Generally have the same name as the instance variable they access.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Testing Methods</text><br/><text styleclass="Normal" translate="true">Usually have the format </text><text styleclass="Class Name" translate="true">#isXXX</text><text styleclass="Normal" translate="true">. eg. </text><text styleclass="Class Name" translate="true">#isOpen</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#isEmpty</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Converting Methods</text><br/><text styleclass="Normal" translate="true">Usually have the format </text><text styleclass="Class Name" translate="true">#asXxxxxx</text><text styleclass="Normal" translate="true">. eg. </text><text styleclass="Class Name" translate="true">#asString</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#asFloat</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">External Library Methods</text><br/><text styleclass="Normal" translate="true">Methods in the </text><text styleclass="Class Name" translate="true">ExternalLibrary</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">hierarchy have a special naming convention as described in </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodselector" styleclass="Normal" translate="true">External Method Selector</link><text styleclass="Normal" translate="true">.</text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Examples</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">open</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">asSortedCollection</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">includes: anObject</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">includesKey: aKey</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">at: anInteger put: aCharacter</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">from: startInteger to: stopInteger</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">associationAt: aKey ifAbsent: exceptionHandler</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">replaceFrom: start to: stop with: replacementElements startingAt: repStart</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="classname" styleclass="Normal" translate="true">Class Name</link><text styleclass="Normal" translate="true">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="wordcapitalization" styleclass="Normal" translate="true">Word Capitalization</link></para>
  </body>
</topic>

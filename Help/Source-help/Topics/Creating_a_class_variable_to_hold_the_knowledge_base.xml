<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Creating a class variable to hold the knowledge base</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating a class variable to hold the knowledge base</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Sometime ago we mentioned that we would need to hold the root of the knowledge base in a variable, if only so the game will know where to get hold of it when it starts. Now is the time to create and initialize this variable. We could, of course, choose to use a global variable for this purpose. However, it is usual to frown upon global variables since they may clash with similarly named variables in another application. Fortunately there is an excellent alternative; to use a </text><text styleclass="Program Feature" translate="true">class variable</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We have seen how instance variables can be used to hold data that is associated with a particular instance. Well it is also possible to create another type of variable that is associated with a particular class object. It&apos;s very easy to add class variable slots to your class by using the </text><text styleclass="Program Feature" translate="true">Class Browser</text><text styleclass="Normal" translate="true">. Let us choose to add a class variable called </text><text styleclass="Class Name" translate="true">KnowledgeBase</text><text styleclass="Normal" translate="true"> to the </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> class. First of all select </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> in the browser and then choose the </text><text styleclass="Program Feature" translate="true">Class definition</text><text styleclass="Normal" translate="true"> mode to display the existing definition. Modify this as shown below and accept the change using </text><text styleclass="Menu Command" translate="true">Ctrl+S</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Object subclass: #Animal</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">instanceVariableNames: &apos;name&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classVariableNames: &apos;KnowledgeBase&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">poolDictionaries: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classInstanceVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: It is conventional for the names of class variables to begin with an uppercase letter.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This new variable can be used like any other but only within the scope of the </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> class. This means that you can use it in any methods (either instance or class) that are defined for </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> or its subclasses. You will not, however, be able to successfully reference the </text><text styleclass="Class Name" translate="true">KnowledgeBase</text><text styleclass="Normal" translate="true"> variable from any other class or workspace. This means that you would not be able to reference it from within the </text><text styleclass="Class Name" translate="true">Question</text><text styleclass="Normal" translate="true"> class, for example. The good thing about this additional level of privacy compared with true globals means that no other class or program can modify this variable inadvertently.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: Sometimes you might want to allow methods outside the normal scope to be able to access a class variable. This is quite possible, and is simply a matter of defining some accessor methods in much the same way as you would for instance variables. The only difference, of course, is that the accessor methods you define for a class variable must be defined as class methods rather than instance ones. Anyway, in our Animal game will only need to reference the KnowledgeBase from within the Animal class so we&apos;ll have no need for any accessor methods.</text></para>
  </body>
</topic>

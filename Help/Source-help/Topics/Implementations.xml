<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Implementations</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Implementations</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The implementation of the server object itself (the </text><text styleclass="Class Name" translate="true">coclass</text><text styleclass="Normal" translate="true">) will require one or more classes. Any Dolphin object can be a COM object, so existing classes can be extended to expose them as COM objects quite easily by the addition of a few methods required by the framework, and of course the implementations of the functions in the COM interface(s). The standard methods are required so that the framework can provide basic life-cycle management and </text><text styleclass="Class Name" translate="true">QueryInterface</text><text styleclass="Normal" translate="true"> support, and are defined by the &lt;</text><text styleclass="Class Name" translate="true">COMObject</text><text styleclass="Normal" translate="true">&gt; protocol. These are:</text></para>
    <list id="2" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Class Name" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#clsid</text></li>
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#finalRelease</text></li>
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#queryInterface:</text></li>
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#queryInterface:ifNone:</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note that the &lt;</text><text styleclass="Class Name" translate="true">COMObject</text><text styleclass="Normal" translate="true">&gt; protocol includes no reference count related messages, because life-cycle management is not the responsibility of the implementation classes but is provided as a generic capability of Dolphin</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s COM framework (in fact by the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="COMObjectStub" styleclass="Class Name" translate="true">COMObjectStub</link><text styleclass="Normal" translate="true">). The implementation of these messages is trivial (or empty) for all but </text><text styleclass="Class Name" translate="true">#queryInterface:ifNone:</text><text styleclass="Normal" translate="true">, which is required to provide answer an interface pointer onto the server of the requested type if that interface is supported. There are example implementations of this in the image, such as in </text><text styleclass="Class Name" translate="true">AXControlSite</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When starting from scratch one would normally subclass </text><text styleclass="Class Name" translate="true">COMInterfaceImp</text><text styleclass="Normal" translate="true"> as this allows one to inherit the majority of the &lt;</text><text styleclass="Class Name" translate="true">COMObject</text><text styleclass="Normal" translate="true">&gt; implementation, in particular </text><text styleclass="Class Name" translate="true">QueryInterface</text><text styleclass="Normal" translate="true"> support, as well as generic self-registration code. To complete the template support one need then override only two methods:</text></para>
    <list id="3" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Class Name" style="margin-left:24px; font-family:Arial; font-size:9pt; font-style:italic; color:#000000;">
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;clsid</text></li>
      <li styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">COMInterfaceImp&gt;&gt;supportedInterfaces</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">#clsid</text><text styleclass="Normal" translate="true"> answers the coclass </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true"> (the globally unique ID allocated to the particular coclass which is registered with COM, and used by the client to “name” the object is wants to instantiate). One may also, optionally, override #progId to answer the friendly string name of the component which is sometimes used, for example. </text><text styleclass="Normal" translate="true">‘</text><text styleclass="Normal" translate="true">Dolphin.RandomStream</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">. This is only needed for self-registration, however, and has no other use.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">#supportedInterfaces</text><text style="font-family:Arial; font-size:8pt; color:#000000;" translate="true">&#32;</text><text style="font-family:&apos;Times New Roman&apos;; font-size:10pt; color:#000000;" translate="true">is expected to answer an </text><text styleclass="Normal" translate="true">Array</text><text style="font-family:Arial; font-size:8pt; color:#000000;" translate="true">&#32;</text><text style="font-family:&apos;Times New Roman&apos;; font-size:10pt; color:#000000;" translate="true">of the interface classes that the object implements, for example:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">supportedInterfaces</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">^Array with: IPropertyNotifySink</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Consequently if one implements one</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s COM server under </text><text styleclass="Class Name" translate="true">COMInterfaceImp</text><text styleclass="Normal" translate="true"> one can usually concentrate on its functionality without worrying too much about the plumbing.</text></para>
  </body>
</topic>

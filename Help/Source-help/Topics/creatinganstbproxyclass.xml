<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Creating an STB Proxy class</title>
  <keywords>
    <keyword translate="true">Creating an STB Proxy class</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating an STB Proxy class</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You need to create a new subclass of </text><text styleclass="Class Name" translate="true">STBProxy</text><text styleclass="Normal" translate="true"> with instance variables to hold the crucial data. The proxy cannot, of course, contain the object that it trying to represent as this would cause and endless recursion. There are two main types of proxy, those that</text></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">generate a new object,</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">represent a way of finding an existing object.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If the proxy generates a new object then its </text><text styleclass="Class Name" translate="true">#fixup:at:</text><text styleclass="Normal" translate="true"> should instantiate a new object instanciated from its stored data and use </text><text styleclass="Class Name" translate="true">#become</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> to swap it for the proxy thus resolving any other references to the proxy. In most cases you can just implement a </text><text styleclass="Class Name" translate="true">#value</text><text styleclass="Normal" translate="true"> method which answers the new instance and inherit the </text><text styleclass="Normal" translate="true">#become:</text><text styleclass="Normal" translate="true"> behaviour from </text><text styleclass="Class Name" translate="true">STBProxy</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If the proxy represents a way of finding an existing object then using </text><text styleclass="Class Name" translate="true">#become</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> is going to have disastrous consequences for those objects that refer to the existing object. In this case your proxy will need to re-implement </text><text styleclass="Class Name" translate="true">#fixup:at: method, sending STBInFiler&gt;&gt;#fixup:to:</text><text styleclass="Normal" translate="true"> to fixup the filer to the desired object. Finally, answer the new object. e.g.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">fixup: anSTBInfiler at: proxyIndex</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Tell anSTBInFiler to replace in its</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;map of read objects the entry at proxyIndex</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;(the receiver) by the object we specify.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;We must answer the new object.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;| newObject |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;newObject := Magic find: key.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; anSTBInFiler fixup: proxyIndex to: newObject</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^newObject</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">STBInFiler&gt;&gt;#fixup:to:</text><text styleclass="Normal" translate="true"> only replaces the proxy itself by the new object - it can not fixup up any other references to the proxy, so such a proxy should not contain any references to itself. However, if self references by the proxy are unavoidable then you can use </text><text styleclass="Class Name" translate="true">#oneWayBecome</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> to fixup the nested references but note that this method is slower than </text><text styleclass="Class Name" translate="true">#become</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">.</text></para>
  </body>
</topic>

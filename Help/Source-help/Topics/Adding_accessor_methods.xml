<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Adding accessor methods</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Adding accessor methods</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">One of the things about object-oriented programming in general, and Smalltalk in particular, is that it is not possible to gain access to the data stored in an object except by means of methods written in the class. For example, we will want to be able to set and retrieve the value in the </text><text styleclass="Class Name" translate="true">name</text><text styleclass="Normal" translate="true"> instance variable slot of an </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> and, to do this, we will need to write a couple of methods. These are known as </text><text styleclass="Program Feature" translate="true">accessor</text><text styleclass="Normal" translate="true"> methods. We will want to add methods for </text><text styleclass="Class Name" translate="true">#name</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">#name</text><text styleclass="Normal" translate="true">:.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Select the </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> class in the </text><text styleclass="Program Feature" translate="true">Class Browser</text><text styleclass="Normal" translate="true"> and choose the</text><text styleclass="Menu Command" translate="true"> Method/New</text><text styleclass="Normal" translate="true"> command. This sets up the browser ready to receive a new method definition in the </text><text styleclass="Program Feature" translate="true">Method Source</text><text styleclass="Normal" translate="true"> pane. Enter the following method:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">name</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Answer the name of the receiver&quot;</text><tab /></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">^name</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Choose </text><text styleclass="Menu Command" translate="true">Workspace/Accept</text><text styleclass="Normal" translate="true"> or type </text><text styleclass="Menu Command" translate="true">Ctrl+S </text><text styleclass="Normal" translate="true">to accept this new method definition into the image. You&apos;ll see that, after the browser compiles the method, it is then redisplayed in the source pane in coloured text. The different colours identify different parts of the language and quite soon you&apos;ll find this makes the methods easier to read.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The method that we have just added included the ^ symbol to indicate that a value should be returned from the method. The intention of this particular accessor method is just to return the value held in the </text><text styleclass="Class Name" translate="true">name</text><text styleclass="Normal" translate="true"> instance variable. Now let us add another method to set the value of this variable. Once again choose </text><text styleclass="Menu Command" translate="true">Method/New</text><text styleclass="Normal" translate="true"> and enter and accept the following code:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">name: aStringName</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Private - Initialize the name of the receiver to aStringName&quot;</text><tab /></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">name := aStringName</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This method receives one parameter that I&apos;ve given a name of </text><text styleclass="Class Name" translate="true">aStringName</text><text styleclass="Normal" translate="true"> to identify it. Notice how the name chosen for this parameter can indicate to the reader of the code what type of object is acceptable here, e.g. a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true">. This is purely done for readability, so at no time will the system insist that actually only a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> is allowable. It can be a useful practice to get into the habit of naming parameters in this way so that someone browsing through the methods of your program in future will have a better idea how to use them.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The sole purpose of this method is to assign the contents of the passed parameter to the </text><text styleclass="Class Name" translate="true">name</text><text styleclass="Normal" translate="true"> instance variable. Notice that I have chosen to label the method as </text><text styleclass="Class Name" translate="true">Private</text><text styleclass="Normal" translate="true"> within the method comment. It was discussed in the previous chapter that Smalltalk does not enforce such method privacy but, once again, this is useful documentation for any programmer intending to make use of our </text><text styleclass="Class Name" translate="true">Animal</text><text styleclass="Normal" translate="true"> class. What it indicates is that, under normal circumstances, one would not expect to call this method directly.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: You may be wondering what this method is for if it is not intended to be directly called. We&apos;ll see the reasoning for this later.</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">External Library</title>
  <keywords>
    <keyword translate="true">External Library</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">External Library</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Software systems do not exist in isolation, but need to interface with other systems and make use of pre-existing software components and services. Commonly interfaces to external system, services, and components are supplied in shared libraries (DLLs in Windows). How does one go about calling such services from Smalltalk in a regular way?</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Represent each shared library with a class which manages loading and accessing that library and which includes a method for each function of the library one wishes to call. Each external library class then has a singleton instance which is sent messages to invoke the external functions. This scheme fits neatly into the Smalltalk message passing paradigm, and allows for polymorphic behaviour between libraries too.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Creating the Library Class</text></para>
    <list id="3" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Create a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newclass" styleclass="Normal" translate="true">New Class</link><text styleclass="Normal" translate="true"> that is a subclass of </text><text styleclass="Class Name" translate="true">ExternalLibrary</text><text styleclass="Normal" translate="true">. The name of the new class is usually formed from the stem of the DLL name (minus any version, or &quot;bit&quot; suffix) plus the suffix </text><text styleclass="Normal" translate="true">Library</text><text styleclass="Normal" translate="true">; for example, </text><text styleclass="Class Name" translate="true">ODBCLibrary</text><text styleclass="Normal" translate="true"> might be a suitable name for a class to represent the ODBC32.DLL library.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Implement the class method </text><text styleclass="Class Name" translate="true">#fileName</text><text styleclass="Normal" translate="true"> to answer the path of the library (or just the filename if you want the system to search the path when loading the library as described in the Win32 help for </text><text styleclass="Class Name" translate="true">LoadLibrary</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true">). Do not include the &quot;.DLL&quot; extension.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Add Methods for Each Function</text></para>
    <list id="4" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Implement a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newmethod" styleclass="Normal" translate="true">New Method</link><text styleclass="Normal" translate="true"> on the instance side of the library class for each of the functions exported by the library which you wish to call. Formulate the selectors by following the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodselector" styleclass="Normal" translate="true">External Method Selector</link><text styleclass="Normal" translate="true"> pattern.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Where ANSI and wide (Unicode) character versions of functions exist, the former version should be used because Dolphin does not support Unicode natively at present. For example, we use </text><text styleclass="Class Name" translate="true">LoadLibraryA</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true"> rather than </text><text styleclass="Class Name" translate="true">LoadLibraryW</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true">. Where only a Unicode version exists, explicit conversion to/from Unicode strings may be required. This normally only affects functions with string arguments, though there are some exceptions.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Quote any function names which are not valid literal </text><text styleclass="Class Name" translate="true">Symbols</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">The implementation of external library calls has a syntax similar to primitive calls, with </text><text styleclass="Normal" translate="true">primitive:</text><text styleclass="Normal" translate="true"> being replaced by the calling convention (usually </text><text styleclass="Class Name" translate="true">stdcall</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Class Name" translate="true">cdecl</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">) and with return type symbol, function name (or ordinal), and parameter type symbols following, There are a fixed set of type symbols which correspond to types with which Win32™ programmers will be largely familiar (e.g. </text><text styleclass="Class Name" translate="true">dword</text><text styleclass="Normal" translate="true"> for 32-bit unsigned integer values, </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> for pointers etc). One type, </text><text styleclass="Class Name" translate="true">void</text><text styleclass="Normal" translate="true">, is valid only as a return type and some types, e.g. </text><text styleclass="Class Name" translate="true">lppvoid</text><text styleclass="Normal" translate="true">, are valid only as argument types. The primitive is normally followed by an </text><text styleclass="Class Name" translate="true">#invalidCall</text><text styleclass="Normal" translate="true"> message to perform error reporting.</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">See the chapter on </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalinterfacing" styleclass="Normal" translate="true">External Interfacing</link><text styleclass="Normal" translate="true"> for more details.</text></para>
    <list id="4" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">You may find it convenient to implement helper methods for any additional behaviour required for the library, or to wrap the external methods to make them simpler to use from a Smalltalk programmer&apos;s perspective.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">Using External Libraries</text></para>
    <list id="5" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Send messages with the appropriate selectors and arguments to the </text><text styleclass="Class Name" translate="true">#default instance of the library class, which is lazily created as required. Objects can be normally converted to appropriate forms for passing to external functions by sending them the #asParameter</text><text styleclass="Normal" translate="true"> message. Explicit conversion is frequently not required (e.g. strings can be passed directly to </text><text styleclass="Class Name" translate="true">lpstr</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> parameter types) but is not harmful if performed unnecessarily.</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">The automatic conversions performed by the external call primitive are described in the chapter on </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalinterfacing" styleclass="Normal" translate="true">External Interfacing</link><text styleclass="Normal" translate="true"> .</text></para>
    <list id="5" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">You may wish to close libraries explicitly when they are no longer required to unload them from memory. This is not strictly necessary as Dolphin (and Win32) will do this for you on program termination.</text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Examples</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">WinMMLibrary</text><text styleclass="Normal" translate="true"> is the representative of </text><text styleclass="Program Feature" translate="true">WinMM.DLL</text><text styleclass="Normal" translate="true">, the Windows multimedia extensions library. Its class </text><text styleclass="Class Name" translate="true">#filename</text><text styleclass="Normal" translate="true"> method is simply:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">fileName</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer the file name of the external library which the receiver represents.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^&apos;WinMM&apos;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We can play sounds via </text><text styleclass="Class Name" translate="true">WinMMLibrary</text><text styleclass="Normal" translate="true"> if we implement the </text><text styleclass="Class Name" translate="true">PlaySound</text><text styleclass="Normal" translate="true">() functions:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">playSound: aString hmod: anExternalHandle fdwSound: anInteger</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Plays a sound specified by the given filename, resource, or system event.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;A system event may be associated with a sound in the registry.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;Answers whether successful.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;BOOL PlaySound(LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&lt;stdcall: bool PlaySoundA lpvoid handle dword&gt;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^self invalidCall</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">As you can see there is a simple and fairly direct mapping between the function prototype and the Dolphin external call specification.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Class</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Class Name" translate="true">Sound</text><text styleclass="Normal" translate="true"> has a simple wrapper for this method:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">play: flags</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Play the receiver with the specified flags.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;Answer whether it succeeded.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^WinMMLibrary default playSound: name hmod: location fdwSound: flags</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">Sound</text><text styleclass="Normal" translate="true"> then provides even simpler messages, such as:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">woofAndWait</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Play the receiver, waiting for the woof to finish&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;| flags |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;flags := (type bitAnd: ##(SND_ASYNC bitInvert)) bitOr: SND_SYNC.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self play: flags</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Consequences</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Any particular external library may contain a large number of functions. Implementing them all may consume quite a lot of memory in unused methods, and may take a lot of time. It is advisable to implement the function calling methods as needed and employ a pattern such as </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodselector" styleclass="Normal" translate="true">External Method Selector</link><text styleclass="Normal" translate="true"> to avoid unnecessary duplication.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Where external functions capture the addresses of objects passed to them, those objects must be allocated from the fixed memory space, as otherwise they may be moved by the memory manager during a garbage collection, invalidating the address. The fixed memory space carries more overhead than the normal object spaces.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Where external functions capture the addresses of objects passed to them, a reference to those objects must be maintained in the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="glossimage" styleclass="Normal" translate="true">image</link><text styleclass="Normal" translate="true"> to prevent them from being garbage collected while the external function is still using them.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">External interfaces frequently define structured data types, and these must be defined in Dolphin too if the interface is to be used successfully. Please see </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalinterfacing" styleclass="Normal" translate="true">External Interfacing</link><text styleclass="Normal" translate="true"> for more details.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">There are quite a few examples of external library interface classes in the base system, for example the core set of Windows libraries all have representatives (</text><text styleclass="Class Name" translate="true">KernelLibrary</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">UserLibrary</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">GDILibrary</text><text styleclass="Normal" translate="true">), and these contain large numbers of functions. In fact Dolphin performs almost all interfacing with the operating system directly from Smalltalk; very little is hidden in primitives.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodselector" styleclass="Normal" translate="true">External Method Selector</link><text styleclass="Normal" translate="true">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalcallback" styleclass="Normal" translate="true">External Callback</link></para>
  </body>
</topic>

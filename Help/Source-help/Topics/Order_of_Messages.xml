<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Order of Messages</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Order of Messages</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The order in which Smalltalk evaluates more complicated arithmetic expressions is different than you might expect, especially if you&apos;re used to other computer languages. For example, try displaying the result of:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">3 + 4 * 5</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You might expect to see a result of 23 but Smalltalk reports 35. This is because we normally think of multiplication and division operators having a higher </text><text styleclass="Program Feature" translate="true">precedence</text><text styleclass="Normal" translate="true"> than addition or subtraction operators. We would expect the higher precedence multiplication to be performed before the lower precedence addition. This is not the case, however. In Smalltalk, all binary messages are taken to have the same precedence and will be evaluated in &quot;first come, first served&quot; order. This is a minor inconvenience but can be remedied by always using appropriate parentheses whenever there might be confusion. See that the following now yields the expected result:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">3 + (4 * 5)</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Smalltalk does enforce some precedence rules, though. They are very straightforward and, in most cases (apart from the above quirk concerning arithmetic precedence) they yield code that is eminently readable. The order of message evaluations in any expression is as follows:</text></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Simple Messages (highest precedence) </text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Binary Messages </text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Keyword Messages (lowest precedence)</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; color:#000000;" translate="true">&#32;</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Try the following examples and try to predict the results:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">3 squared + 4 squared</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">#(130 140 150 160) at: 4 - 2</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">5 factorial gcd: &apos;a string&apos; size &quot;gcd: computes Greatest Common Divisor&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">3 squared + 4 squared sqrt</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">(3 squared + 4 squared) sqrt</text></para>
    <para styleclass="Code Example"></para>
  </body>
</topic>

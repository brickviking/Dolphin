<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Views</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Views</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A view must be created to match the type of model data that must be displayed and must be compatible with the expectations of the presenter. Some views may have their own class but others may simply be &quot;composed&quot; out of other views. In either case it is the job of the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="View_Composer" styleclass="Program Feature" translate="true">View Composer</link><text styleclass="Normal" translate="true"> to configure a view object and save it down as a named view resource.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">It has become fashionable to use the word &quot;Skins&quot; to apply to interchangeable user interface designs that can be plugged onto an underlying application component. This is exactly what views are in the MVP world.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">View resources are actually class methods (usually of a particular presenter) that hold a literal specification of how to rebuild a view. For example, the method that specifies the default view for a </text><text styleclass="Normal" style="font-style:italic;" translate="true">TextPresenter</text><text styleclass="Normal" translate="true"> looks like this:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">TextPresenter class&gt;&gt;resource_Default_view</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Answer the literal data from which the &apos;Default view&apos; resource can be reconstituted.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">DO NOT EDIT OR RECATEGORIZE THIS METHOD.</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">If you wish to modify this resource evaluate:</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Default_view)</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">^#(#&apos;!STL&apos; 3 788558 10 ##(STBViewProxy) &#160;8 ##(TextEdit) &#160;98 16 0 0 98 2 8</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">1140916352 1025 416 0 524550 ##(ColorRef) &#160;8 4278190080 0 7 0 0 0 416 0 8 </text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">4294906635 852486 ##(NullConverter) &#160;0 0 1 983302 ##(MessageSequence) &#160;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">202 208 98 3 721670 ##(MessageSend) &#160;8 #createAt:extent: 98 2 328198 </text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">##(Point) &#160;11 11 722 241 39 416 658 8 #selectionRange: 98 1 525062 ##(Interval) &#160;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">3 1 3 416 658 8 #isTextModified: 98 1 32 416 983302 ##(WINDOWPLACEMENT) &#160;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">8 #[44 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 255 255 255 </text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">255 255 255 255 255 5 0 0 0 5 0 0 0 125 0 0 0 24 0 0 0] 98 0 722 193 193 0 27 )</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When reconstituted, this view resource yields an instance of </text><text styleclass="Class Name" translate="true">TextEdit</text><text styleclass="Normal" translate="true"> (you may be able to see the class name in the first line of the specification). View resources are always given textual names to identify them. This particular resource is called </text><text styleclass="Normal" style="font-style:italic;" translate="true">TextPresenter.Default view</text><text styleclass="Normal" translate="true">. Once again, from the above, you may be able to see how the resource name and maps onto the name of the method that holds it.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Note, although the above method indicates that you can evaluate an expression to open the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="View_Composer" styleclass="Notes" translate="true">View Composer</link><text styleclass="Notes" translate="true"> onto this view resource, there is a much easier way; simply locate the view in the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="View_Browser" styleclass="Notes" translate="true">View Browser</link><text styleclass="Notes" translate="true"> and double-click it.</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Thread Affinity</title>
  <keywords>
    <keyword translate="true">Thread Pooling</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Thread Affinity</text></para>
    </header>
    <para style="margin-bottom:10px;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">The threads used to perform overlapped calls are allocated on the first attempt to make an overlapped call from a particular Smalltalk </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">Process</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> . Once a thread has been allocated to a </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">Process</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">, it remains associated with that </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">Process</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> until the </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">Process</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> is terminated. Note that this differs from versions of Dolphin prior to 6.0; in older versions the threads were allocated from a pool.</text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">A Smalltalk Process corresponds more closely to a &quot;thread&quot; than a &quot;process&quot; in operating system terms, however for historical reasons the class is still called Process.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The association between </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true"> and thread is useful when calling APIs that have thread affinity, in that it means all calls from the same </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true"> will be on the same thread. Many APIs and libraries, including the C runtime library and Win32, use &quot;global&quot; variables that are actually thread local variables to report extended error information. For example many C functions set the </text><text styleclass="Class Name" translate="true">errno</text><text styleclass="Normal" translate="true"> variable, and most Win32 API calls set a thread local variable accessed by </text><text styleclass="Class Name" translate="true">GetLastError</text><text styleclass="Normal" translate="true">(), when they fail. These particular examples are so important that they are exposed through accessor methods on </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true">, namely </text><text styleclass="Normal" style="font-style:italic;" translate="true">errno</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Normal" style="font-style:italic;" translate="true">lastError</text><text styleclass="Normal" translate="true"> respectively.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Each thread allocated consumes operating system resources for its stack, context information, etc. There is currently no way to disassociate a thread from a </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true"> and release its resources, other than terminating the Smalltalk </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true">. Thus the number of Smalltalk </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process </text><text styleclass="Normal" translate="true">objects performing overlapped calls that can exist simultaneously is limited by the maximum number of threads that the operating system can practically support in one process. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The theoretical limit on the maximum number of threads in one process is based on the default allocation of 1Mb of virtual address space for the stack. This implies a theoretical maximum of about 2000 threads per process, but in fact the practical limit is much lower than this. It is not generally advisable to run more than a couple of hundred threads in any one process.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If your application is a server (such as a web server) that has to support many hundreds of clients, and you are using overlapped calls from processes servicing those users, you may have to consider implementing some form of </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true"> pooling architecture, rather than allocating one Smalltalk </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process</text><text styleclass="Normal" translate="true"> per user. You will run into a limitation with Smalltalk </text><text styleclass="Normal" style="font-style:italic;" translate="true">Process </text><text styleclass="Normal" translate="true">objects too, since these also reserve a chunk of virtual address space for the stack (128Kb by default), but it will come much sooner where overlapped call threads are in use.</text></para>
  </body>
</topic>

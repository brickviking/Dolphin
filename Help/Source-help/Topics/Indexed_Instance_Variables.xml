<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Indexed Instance Variables</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Indexed Instance Variables</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">For some classes of object, normally those that hold collections of other objects, it is not convenient to simply use named instance variable slots for the object&apos;s storage. Hopefully you can see why, since you might need hundreds of separately named variables and even different numbers of variables depending on how many objects you wanted to hold on to. For this reason, certain classes are allowed to have </text><text styleclass="Program Feature" translate="true">indexed instance variables</text><text styleclass="Normal" translate="true"> associated with them. </text></para>
    <para style="margin-top:7px; margin-bottom:7px;"><image src="IndexedIVs.gif" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Each of the instance variable slots is accessible using an integer index. This makes an object that uses indexed variables very much like an array in most other programming languages. The index of the first slot is one, so we generally say that Smalltalk indexes are one-based (rather than zero-based). </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The number of available indexed variables can be altered dynamically by sending the object a </text><text styleclass="Class Name" translate="true">#resize</text><text styleclass="Normal" translate="true">: message with an integer parameter containing the number of slots required. This makes it very easy to implement classes that can hold collections of other objects. Smalltalk comes complete with a very powerful set of collection classes. For the moment, let&apos;s just take a look at the class definition of a common collection class in the base image. Using the</text><text styleclass="Program Feature" translate="true"> Class Browser</text><text styleclass="Normal" translate="true">, find the class called </text><text styleclass="Class Name" translate="true">Array</text><text styleclass="Normal" translate="true"> (remember you need to select the top left-hand pane and type </text><text styleclass="Menu Command" translate="true">Ctrl+F</text><text styleclass="Normal" translate="true">). You should see the following class definition displayed:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">ArrayedCollection variableSubclass: #Array</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">instanceVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">classVariableNames: &apos;&apos;</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">poolDictionaries: &apos;&apos;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The class is being defined using a single message with a rather lengthy selector, </text><text styleclass="Class Name" translate="true">#variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:.</text><text styleclass="Normal" translate="true"> This message is being sent to the class called </text><text styleclass="Class Name" translate="true">ArrayedCollection</text><text styleclass="Normal" translate="true"> on which the new class </text><text styleclass="Class Name" translate="true">Array</text><text styleclass="Normal" translate="true"> is to be based. Note the difference between this definition and the one for </text><text styleclass="Class Name" translate="true">Point</text><text styleclass="Normal" translate="true">. There are no named instance variables required here and, in addition, there is the use of </text><text styleclass="Class Name" translate="true">variableSubclass</text><text styleclass="Normal" translate="true">: as part of the message selector rather than just plain old </text><text styleclass="Class Name" translate="true">subclass</text><text styleclass="Normal" translate="true">:. Now, without going into too much detail at this stage, you just need to take away from this that the </text><text styleclass="Class Name" translate="true">Array</text><text styleclass="Normal" translate="true"> class is being defined as having a variable number of indexed instance variable slots rather than a fixed number of named instance variables. </text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Interfaces</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Interfaces</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Implementing a COM server object (or coclass) requires that one provide a minimum of one interface class, and one implementation class. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Each COM interface that an object exposes requires one class. Custom interface classes are derived </text><text styleclass="Class Name" translate="true">IUnknown</text><text styleclass="Normal" translate="true">, and dual interface classes from </text><text styleclass="Class Name" translate="true">IDispatch</text><text styleclass="Normal" translate="true">. </text><text styleclass="Class Name" translate="true">IUnknown</text><text styleclass="Normal" translate="true"> has an abstract superclass, </text><text styleclass="Class Name" translate="true">COMInterface</text><text styleclass="Normal" translate="true">, the main purpose of which is to separate out the the framework implementation of COM interfaces to avoid cluttering </text><text styleclass="Class Name" translate="true">IUnknown</text><text styleclass="Normal" translate="true">. </text><text styleclass="Class Name" translate="true">IDispatch</text><text styleclass="Normal" translate="true"> is itself (like the interface it represents) derived from </text><text styleclass="Class Name" translate="true">IUnknown</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Interface class consists of a set of external virtual function calls definitions following the normal Dolphin syntax (see External Interfacing), and (usually) a set of wrapper methods that make these easier to use within Smalltalk. Without the wrapper methods the raw COM functions are awkward to use, primarily because COM always returns values via output parameters, an idiom which is awkward even in C/C++. The reason for this is that the return value is, in lieu of proper exceptions, reserved for a success/failure return code value called an </text><text styleclass="Class Name" translate="true">HRESULT</text><text styleclass="Normal" translate="true">. Negative </text><text styleclass="Class Name" translate="true">HRESULTs</text><text styleclass="Normal" translate="true"> indicate failure, positive (and zero) success. Dolphin</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s VM and external call mechanism collaborate to automatically translate negative </text><text styleclass="Class Name" translate="true">HRESULT</text><text styleclass="Normal" translate="true"> codes into </text><text styleclass="Class Name" translate="true">HRESULTError</text><text styleclass="Normal" translate="true"> exceptions, so the responsibility of the wrapper methods is, where possible, to provide a method that fits more comfortably into Smalltalk</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">s message passing paradigm. Typically these wrapper methods (in fact the whole interface class) will be automatically generated by the </text><text styleclass="Program Feature" translate="true">Active-X Component Wizard</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The external method definitions of an interface class are sufficient to use that class for calling out to a COM server object implemented elsewhere, but in order to support call-in a table of function definitions is required. The table (actually an Array in vtable order) is built by the </text><text styleclass="Class Name" translate="true">#defineFunctions</text><text styleclass="Normal" translate="true"> method on the class side, and consists of a number of sub-instances of the </text><text styleclass="Class Name" translate="true">COMFunctionAbstract</text><text styleclass="Normal" translate="true"> class, mostly likely </text><text styleclass="Class Name" translate="true">COMFunction</text><text styleclass="Normal" translate="true"> instances. These function descriptor objects are responsible for mapping inbound virtual function calls to message sends to the actual server object, marshalling the parameters from the C stack into appropriate Smalltalk objects for the arguments. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">#defineFunctions</text><text styleclass="Normal" translate="true"> method used to build the function table can also be generated by the </text><text styleclass="Program Feature" translate="true">Active-X Component Wizard</text><text styleclass="Normal" translate="true">. When the wizard is not used </text><text styleclass="Class Name" translate="true">#defineFunctions</text><text styleclass="Normal" translate="true"> can be written by hand, and the result used to generate the virtual function calls, but this is not recommended.</text></para>
  </body>
</topic>

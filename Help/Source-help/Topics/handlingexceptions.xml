<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Handling Exceptions</title>
  <keywords>
    <keyword translate="true">Handling Exceptions</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Handling Exceptions</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Having caught an exception (hopefully one that was anticipated), one then needs to do something with it to recover from the exceptional condition. The handler block can contain any sequence of Smalltalk statements, and it is passed the exception instance as its argument when evaluated. Exceptions understand a &apos;handler response&apos; protocolthat can be used to affect the execution state. The messages and their meanings are:</text></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#exit</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true">. Depending on whether the exception is resumable or non-resumable this is the same as </text><text styleclass="Class Name" translate="true">#resume</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Class Name" translate="true">#resume</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true"> respectively. This is the way to specify that execution should continue from the point where the exception was raised if possible, and if not from the statement after the handler block.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#outer</text><text styleclass="Normal" translate="true">. Evaluate the next enclosing exception handler, which may not return to the handler depending on whether it modifies the execution path itself. If there is no suitable outer handler, then the default action is performed for the exception, which will vary depending on the class of exception, and the </text><text styleclass="Class Name" translate="true">SessionManager</text><text styleclass="Normal" translate="true">. It is probably only appropriate to use this message where one knows there is an outer handler, the behaviour of which one wishes to modify slightly.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#pass</text><text styleclass="Normal" translate="true">. Pass the exception to the next enclosing exception handler. This differs from </text><text styleclass="Class Name" translate="true">#outer</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">in that control does not return to the handler sending this message - it is the standard way to rethrow an exception, perhaps after having decided that one cannot handle it after all.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#resignalAs</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">. Raise a different class of exception in place of the current exception, as if the new class of exception had been raised in the first place.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#resume</text><text styleclass="Normal" translate="true">(:).</text><text styleclass="Normal" translate="true"> If the exception is resumable, continue execution at the point immediately after where the exception was raised, with the argument (or </text><text styleclass="Normal" translate="true">nil</text><text styleclass="Normal" translate="true">) as the result of the expression that raised the exception. If the exception is not resumable, then an </text><text styleclass="Class Name" translate="true">Error</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">is raised to the effect that an attempt was made to resume a non-resumable exception.</text></li>
      <li styleclass="Class Name"><text styleclass="Class Name" translate="true">#retry. </text><text styleclass="Normal" translate="true">The try-block associated with the handler (i.e. the receiver of the </text><text styleclass="Class Name" translate="true">#on:do</text><text styleclass="Normal" translate="true">: to which it is the last argument) is re-evaluated. Of course it is pointless retrying if the same exception will be raised, and this is an easy way to create an infinite loop (though </text><text styleclass="Menu Command" translate="true">Ctrl+Break</text><text styleclass="Normal" translate="true"> should get one out of trouble).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#retryUsing:</text><text styleclass="Normal" translate="true"> Substitute the argument as the new try block, and </text><text styleclass="Normal" translate="true">#retry</text><text styleclass="Normal" translate="true">. This has particular application for operations that may have fast implementations for commonly used execution paths, but slower implementations for less common usages.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">none - drop off the end of the handler block and accept the default behaviour, which is to always perform a </text><text styleclass="Class Name" translate="true">#return</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> with the value of the handler block as the argument.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note that some of these handler responses are quite powerful, and dangerous (especially </text><text styleclass="Class Name" translate="true">#retry</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">#retryUsing</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">), and should be used with caution.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The default behaviour if no handler response is specified is ALWAYS to continue execution with the statement immediately after the handler block (i.e. it is the same as if </text><text styleclass="Class Name" translate="true">#return</text><text styleclass="Normal" translate="true">: </text><text styleclass="Normal" translate="true">had been explicitly specified), regardless of whether the exception is resumable or not, and is very much like the Java/C++ exception handling model in this regard.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In order to resume after a handled resumable exception, it is necessary to explicitly send </text><text styleclass="Class Name" translate="true">#resume</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true"> (or </text><text styleclass="Class Name" translate="true">#exit</text><text styleclass="Normal" translate="true">(:)</text><text styleclass="Normal" translate="true">) to the exception from the handler block.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Further exceptions may occur inside handler blocks, and these can be caught and handled too. Handler blocks are evaluated in the exception enviroment current when they were constructed, which in practice coincides with the behaviour one expects.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">It is worth bearing in mind that when an exception handler block is being evaluated, that the stack has not yet been unwound (if it had then resumption would not be possible). The stack is only unwound when the handler completes by dropping off its end, or by some explicit handler response message being sent to the exception.</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Exceptions vs. Unwinds</title>
  <keywords>
    <keyword translate="true">Exceptions vs. Unwinds</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Exceptions vs. Unwinds</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Unwind blocks are the blocks passed as arguments to the </text><text styleclass="Class Name" translate="true">BlockClosure&gt;&gt;ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">BlockClosure&gt;&gt;#ensure</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> methods, and are typically intended to perform clean-up operations on behalf of the receiving block. </text><text styleclass="Class Name" translate="true">#ensure</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> blocks are guaranteed to be run, whether the receiving block exits normally or not. </text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> blocks are run only when the receiving block exits abnormally, as a result of a ^-return, an exception, or process termination.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Unwind blocks are very useful for maintaining a valid image state (e.g. for unlocking mutual exclusion </text><text styleclass="Class Name" translate="true">Semaphores</text><text styleclass="Normal" translate="true">).</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When an exception occurs, the </text><text styleclass="Class Name" translate="true">Process</text><text styleclass="Normal" translate="true"> stack is unwound </text><text styleclass="Normal" translate="true">after </text><text styleclass="Normal" translate="true">the exception is handled, possibly terminating the process if there is no handler. As the process stack is unwound any unwind blocks encountered along the way are evaluated.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To some extent, exception handler blocks (particularly those which catch </text><text styleclass="Class Name" translate="true">Error</text><text styleclass="Normal" translate="true">) can be used as a form of unwind block, but there is a distinction which must be understood: Following the evaluation of an exception handler block, if that block does not perform some explicit handler response, then the unwinding of the stack is terminated at that point, and execution continues immediately after the handler block. In contrast, unwind blocks only momentarily interfere with the progress of the stack unwinding to the return destination. Additionally, exception handler blocks are not evaluated as a result of ^-returns.</text></para>
    <para styleclass="Code Example"><text styleclass="Normal" translate="true">For example, consider a more guarded version of </text><text styleclass="Class Name" translate="true">Object&gt;&gt;printString</text><text styleclass="Normal" translate="true">, designed to suppress errors occurring in </text><text styleclass="Code Example" translate="true">#printOn:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">safePrintString</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer a String whose characters are a description of the receiver as a developer</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;would want to see it.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;| stream |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;stream := WriteStream on: (String new: 10).</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Catch attempts to print an invalid object which might otherwise</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;throw an exception&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;[self printOn: stream] ifCurtailed: [</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;stream</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;reset;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;nextPutAll: &apos;an invalid &apos;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;display: self class].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;...but not to here&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^stream contents</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Although this method would print the &apos;an invalid XXX&apos; message should an error occur in the #</text><text styleclass="Class Name" translate="true">printOn</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> method, it would not prevent a walkback. </text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> is an unwind handler which guarantees that the argument block (and in this case it must be a block for ANSI compatibility, though the Dolphin implementation will work for other niladic valuables too) will be evaluated, if the receiving block (and it must be a block) should attempt to exit directly from the method. It does not prevent the further propagation of the error. There are three circumstances in which this might happen:</text></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">The receiver block itself includes a ^-return (i.e. return from home method context).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">A block is evaluated inside the context of the receiver block which itself performs a ^-return from its own home method context, where that home method context encloses the receiver block (i.e. it is further down the stack).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">An exception is raised.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">All of these cases boil down to some attempt to perform a &quot;far&quot; return that returns to some method an arbitrary depth back down the stack. In C++ it is only possible to do this with exceptions (or </text><text styleclass="Class Name" translate="true">setjmp</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true">/</text><text styleclass="Class Name" translate="true">longjmp</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true">). In Dolphin exceptions are actually implemented by making use of the ability of blocks to do &quot;far&quot; returns - i.e. case 3 is actually a clever use of case 2.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The other important thing to know about </text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">, is that it does not prevent the &quot;far&quot; return from happening - i.e. it does not cause execution to continue from the statement after its argument block. In order to do that, one must use exception handling (i.e. use </text><text styleclass="Class Name" translate="true">#on:do</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> instead of </text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">). The intention of the </text><text styleclass="Class Name" translate="true">#safePrintString</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">example above should actually be expressed as:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">...</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">[self printOn: stream] on: Error do: [ :e |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;stream</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;reset;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;nextPutAll: &apos;an invalid &apos;;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;display: self class].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">&quot;Will always get to here, even if #printOn: throws an Error&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">...</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note also that unwind protection blocks are not run when the exception mechanism is searching for a handler, only when a handler is actually found and evaluated. If there are no handlers in the call stack, then a walkback will appear, and the unwind protection blocks will not at that stage have been run. They will not be run until the Terminate button on the walkback dialog is pressed, or one terminates the process from the debugger. This does mean that it is possible to construct situations where the system may be left in an invalidate state when the walkback appears if, for example, a global resource is left locked when an exception is raised.</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">#ensure</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> is similar to </text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> (and is implemented using the same mechanism - see the methods in </text><text styleclass="Class Name" translate="true">BlockClosure</text><text styleclass="Normal" translate="true">), but always evaluates the argument block.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In summary, unwind protection (</text><text styleclass="Class Name" translate="true">#ifCurtailed</text><text styleclass="Normal" translate="true">:, </text><text styleclass="Class Name" translate="true">#ensure</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">) is not exception handling. Should one wish to guarantee that certain operations are always performed (cleaning up after oneself), but not want to actually intercept and handle exceptions (i.e. one doesn&apos;t want to prevent a walkback), then unwind protection should be used. If, on the other hand, one actually wants to handle the errors and continue, then exception handling should be used.</text></para>
  </body>
</topic>

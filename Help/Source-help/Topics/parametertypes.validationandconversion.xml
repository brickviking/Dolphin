<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Parameter Types, Validation and Conversion</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Parameter Types, Validation and Conversion</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The external method parameter and return types at the time of writing are:</text></para>
    <para styleclass="Normal"><table rowcount="29" colcount="2" style="width:641px; cell-padding:1px; cell-spacing:2px; border-width:1px; cell-border-width:1px; border-color:#aca899; border-style:raised-color;">
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">bool</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Boolean. As an argument type, accepts </text><text styleclass="Class Name" translate="true">true</text><text styleclass="Normal" translate="true"> (translated to 1) or </text><text styleclass="Class Name" translate="true">false</text><text styleclass="Normal" translate="true"> (translated to 0). Also accepts </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true"> values, pushing their host machine representation. As a return type, if the result is 0 answers </text><text styleclass="Class Name" translate="true">false</text><text styleclass="Normal" translate="true">, if the result is non-zero, answers </text><text styleclass="Class Name" translate="true">true</text><text styleclass="Normal" translate="true">.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">bstr</text></para>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BSTR</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">BSTR, Basic String. A counted string type commonly used in conjunction with COM Automation objects. Accepts </text><text styleclass="Class Name" translate="true">BSTRs</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">Strings</text><text styleclass="Normal" translate="true"> or </text><text styleclass="Class Name" translate="true">UnicodeStrings</text><text styleclass="Normal" translate="true"> (for which a </text><text styleclass="Class Name" translate="true">BSTR</text><text styleclass="Normal" translate="true"> is allocated), or </text><text styleclass="Class Name" translate="true">Integers</text><text styleclass="Normal" translate="true"> assumed to be the address of a </text><text styleclass="Class Name" translate="true">BSTR</text><text styleclass="Normal" translate="true">. As a return type answers an instance of </text><text styleclass="Class Name" translate="true">BSTR</text><text styleclass="Normal" translate="true"> referencing the basic string.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">byte</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Unsigned byte. Accepts </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> only. Passes a 32-bit value generated by zero extending the least significant byte. Fails if not in range 0..255. Zero extends into a positive </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true"> when used as a return type.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">char</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Signed character. Accepts </text><text styleclass="Class Name" translate="true">Characters</text><text styleclass="Normal" translate="true"> only. The integer code point of the character is passed. As a return type answer the </text><text styleclass="Class Name" translate="true">Character</text><text styleclass="Normal" translate="true"> with code point corresponding to the integer return value.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">date</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">DATE, COM date type, which is actually a 64-bit float. Validation as double.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">double</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">64-bit floating point. Accepts instances of </text><text styleclass="Class Name" translate="true">Float</text><text styleclass="Normal" translate="true"> (which contain a host machine representation of a double precision floating point number). </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> may also be passed (they are promoted to the double precision floating point representation of their integral value). Following the Microsoft calling conventions, doubles are passed on the machine stack (not the FP stack) as 64-bit values. As a return type, answers an instance of </text><text styleclass="Class Name" translate="true">Float</text><text styleclass="Normal" translate="true">.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">dword</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Unsigned double word (32-bits), accepts 32-bit </text><text styleclass="Class Name" translate="true">Integers</text><text styleclass="Normal" translate="true"> in the range -16r80000000..16rFFFFFFFF. Positive integers are passed as unsigned, and negative integers in their two&apos;s complement representation. The most negative </text><text styleclass="Class Name" translate="true">LargeInteger</text><text styleclass="Normal" translate="true">, which can be passed, is -16r80000000 (or -2147483648) because this is the largest negative number that can be represented in 32-bits of two&apos;s complement notation. Also accepts byte objects of length 4, assumed to be in an unsigned bit representation. nil is passed as 0. As a return type, answers a </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true">, or a </text><text styleclass="Class Name" translate="true">LargeInteger</text><text styleclass="Normal" translate="true"> if the result cannot be represented as a positive </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true"> (i.e. in 30 bits).</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">float</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">32-bit floating point. Accepts instances of class </text><text styleclass="Class Name" translate="true">Float</text><text styleclass="Normal" translate="true">, or </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> (as double). The conversion of </text><text styleclass="Class Name" translate="true">Floats</text><text styleclass="Normal" translate="true"> (64-bit double precision) to float (32-bit single precision) may result in silent loss of precision. </text><text styleclass="Class Name" translate="true">Floats</text><text styleclass="Normal" translate="true"> are passed on the machine stack (not the FP stack) as 32-bit values. As a return type answers an instance of class </text><text styleclass="Class Name" translate="true">Float</text><text styleclass="Normal" translate="true"> (i.e. promotes to double precision).</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">guid</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">GUID, or UUID. As 16-byte pass or return by value structure.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">handle</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">32-bit handle. Accepts 32-bit integers, nil, or a byte object of size 4. As a return type, answers an </text><text styleclass="Class Name" translate="true">ExternalHandle</text><text styleclass="Normal" translate="true">, unless the returned handle is </text><text styleclass="Class Name" translate="true">NULL</text><text styleclass="Normal" translate="true">, in which case answers </text><text styleclass="Class Name" translate="true">nil</text><text styleclass="Normal" translate="true">. handle is a useful shortcut for specifying </text><text styleclass="Class Name" translate="true">ExternalHandle</text><text styleclass="Normal" translate="true"> as a pass or return by value struct type.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">hresult</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">32-bit signed integer value. Validation as </text><text styleclass="Class Name" translate="true">sdword</text><text styleclass="Normal" translate="true">. As a return type, if less than 0 (i.e. severity is error), causes the external call primitives to fail with a negative failure reason which is the </text><text styleclass="Class Name" translate="true">HRESULT</text><text styleclass="Normal" translate="true"> value. This is convenient (especially for OLE) because it means an </text><text styleclass="Class Name" translate="true">HRESULTError</text><text styleclass="Normal" translate="true"> exception is automatically generated when an external function returns an </text><text styleclass="Class Name" translate="true">HRESULT</text><text styleclass="Normal" translate="true"> error.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">lpstr</text></para>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">char*</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Pointer to C (null-terminated) ASCII string type. Accepts null-terminated byte objects (e.g. </text><text styleclass="Class Name" translate="true">Strings</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">Symbols</text><text styleclass="Normal" translate="true">) or </text><text styleclass="Class Name" translate="true">nil</text><text styleclass="Normal" translate="true"> (null pointer). When used as a return type, answers a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> containing the characters of the C string up to the null terminator. Unlike </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true">, does not accept integer values as pointers, or </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> (indirection) objects. If this validation is too tight for your requirements, then use lpvoid. Do not use this return type where an external function is called which expects the caller to assume ownership of the returned string and to delete it when it is no longer required, as a memory leak will result (use </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> instead and provide appropriate memory management code).</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">lpwstr</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Pointer to null-terminated wide (Unicode) string. Primarily present as a placeholder for a future Unicode version of Dolphin, and is currently synonymous with lpstr.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">lppvoid</text></para>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">void**</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Pointer to pointer. Used for functions that take a parameter into which they write an address. The corresponding argument must be an </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> (or other indirection object), or an object whose first instance variable is such (e.g. an </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true">). The address of the </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> itself is passed (i.e. the argument is passed by reference), so that on return it contains the address written back by the external function. nil is not a valid argument value. As a return type answers a pointer instance of </text><text styleclass="Class Name" translate="true">LPVOID</text><text styleclass="Normal" translate="true"> (i.e. void**) containing the address returned from the function.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">lpvoid</text></para>
          <para styleclass="Normal"><text styleclass="Normal" translate="true">void*</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">General pointer type, accepts byte objects e.g. </text><text styleclass="Class Name" translate="true">Strings</text><text styleclass="Normal" translate="true"> (pointer to contents passed), </text><text styleclass="Class Name" translate="true">nil</text><text styleclass="Normal" translate="true"> (null pointer), </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> (passes as address), or </text><text styleclass="Class Name" translate="true">ExternalAddresses</text><text styleclass="Normal" translate="true"> (the contained address is passed, not a pointer to the </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> object). Where the pointer is captured by the external function, care should be taken to ensure that the object whose address was passed is not garbage collected. When used as a return type, the method answers an </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> with the returned value.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">oop</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Reserved for future use.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">ote</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Reserved for future use</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">qword</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Unsigned quad word. Similar to </text><text styleclass="Class Name" translate="true">dword</text><text styleclass="Normal" translate="true">, but 64-bit (i.e. the range is -16r8000000000000000, the largest 64-bit two&apos;s complement negative integer, up to 16rFFFFFFFFFFFFFFF the largest positive unsigned 64-bit integer). 8-byte objects are acceptable and assumed to contain the correct unsigned bit representation. nil is passed as 0.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">sbyte</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Signed byte. Accepts </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> only. Passes a 32-bit value generated by sign extending the least significant byte. Fails if not in range -128..127. Sign extends into a positive or negative </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true"> when used as a return type.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">sdword</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Signed double word, accepts any </text><text styleclass="Class Name" translate="true">Integer</text><text styleclass="Normal" translate="true"> in the range -16r80000000..16r7FFFFFFF (i.e. </text><text styleclass="Class Name" translate="true">Integer&apos;s</text><text styleclass="Normal" translate="true"> with a 32-bit two&apos;s complement representation - all </text><text styleclass="Class Name" translate="true">SmallIntegers</text><text styleclass="Normal" translate="true"> and 4-byte </text><text styleclass="Class Name" translate="true">LargeIntegers</text><text styleclass="Normal" translate="true">). May also be other byte objects of length 4, which are assumed to contain a 2&apos;s complement 32-bit number. As a return type answers a </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true">, or a </text><text styleclass="Class Name" translate="true">LargeInteger</text><text styleclass="Normal" translate="true"> if more than 31-bits are required to represent the two&apos;s complement result depending on sign. Also accepts nil (passed as 0).</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">sqword</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Signed quad word. Accepts any </text><text styleclass="Class Name" translate="true">Integer</text><text styleclass="Normal" translate="true"> in the range which can be represented as a two&apos;s complement number in 64 bits (i.e. -16r8000000000000000 to 16r7FFFFFFFFFFFFFFF). Also accepts 8 byte objects, which are assumed to contain 64-bit two&apos;s complement numbers. nil is passed as 0. As a return type answers the smallest Integer form that can contain the 64-bit two&apos;s complement integer.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">sword</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Signed word. As </text><text styleclass="Class Name" translate="true">sbyte</text><text styleclass="Normal" translate="true">, but 16-bit, acceptable range -32768..32767. Also accepts a byte object of size 2, which is sign extended to 32 bits.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">word</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Unsigned word. As </text><text styleclass="Class Name" translate="true">byte</text><text styleclass="Normal" translate="true">, but 16-bit, acceptable range 0..65535. Also accepts a byte object of size 2, which is zero extended to 32 bits.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">variant</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">COM Automation </text><text styleclass="Class Name" translate="true">VARIANT</text><text styleclass="Normal" translate="true"> type. Passes by value as a 16-byte structure (i.e. 16-bytes are pushed on the stack). Accepts 16-byte </text><text styleclass="Class Name" translate="true">ExternalStructures</text><text styleclass="Normal" translate="true"> or byte objects, or indirection objects (</text><text styleclass="Class Name" translate="true">integers</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">ExternalAddresses</text><text styleclass="Normal" translate="true">) treated as references to a </text><text styleclass="Class Name" translate="true">VARIANT</text><text styleclass="Normal" translate="true"> and automatically indirect.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">varbool</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">COM Automation </text><text styleclass="Class Name" translate="true">VARIANT_BOOL</text><text styleclass="Normal" translate="true"> type. As bool but true is passed as the 16-bit negative integer –1 (i.e. 0xFFFF).</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">void</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Only valid as a return type - the method answers </text><text styleclass="Class Name" translate="true">self</text><text styleclass="Normal" translate="true">.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">&lt;struct&gt;</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Where struct is an </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> class name. Structure passed by value. Accepts only the exact matching structure class. Again, the </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> arguments may be reference/pointer instances. Note that it is very important to define the associated structure correctly; as if it has an incorrect size an unrecoverable stack fault is the likely result when passing by value. When used as a return value, an instance of the </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> class is answered, with the bytes of the returned structure as its contents (copied into a </text><text styleclass="Class Name" translate="true">ByteArray</text><text styleclass="Normal" translate="true">). Such newly created instances are created directly by the VM, and thus subsidiary initialisation may be necessary. We suggest performing any such initialisation in a wrapper function. Note that the calling conventions for returning structures by value vary depending on whether the structure is 4, 8, or &gt;8 bytes long, with only the latter being returned on the stack. 4 and 8 byte structures are returned quite efficiently in registers.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">&lt;struct&gt;*</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Where struct is an </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> class name. This is equivalent to </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> as a argument type - no validation is currently performed. When used as a return type, a pointer instance of the specified </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> class is answered, containing an </text><text styleclass="Class Name" translate="true">ExternalAddress</text><text styleclass="Normal" translate="true"> pointing at the externally stored value as its first instance variable. Note that the </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> is instantiated directly by the VM, and will have the correct form, but may not be correctly initialised. Any subsidiary initialisation required is best performed in a wrapper function.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:11%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">&lt;N&gt;</text></para>
        </td>
        <td style="width:89%; background-color:#eeeeee;">
          <para styleclass="Normal"><text styleclass="Normal" translate="true">Where N is the byte size of a pass-by-value structure of unspecified type (check carefully to make sure the specified size is correct). Accepts either byte objects (of the correct size) or </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> instances with the correct byte size (or other classes with the same shape as </text><text styleclass="Class Name" translate="true">ExternalStructures</text><text styleclass="Normal" translate="true">). </text><text styleclass="Class Name" translate="true">ExternalStructures</text><text styleclass="Normal" translate="true"> passed to such arguments can be reference instances (i.e. ones containing a pointer to the actual structure bytes, rather than the structure bytes themselves). As a return type, the result is a </text><text styleclass="Class Name" translate="true">ByteArray</text><text styleclass="Normal" translate="true"> of the specified size.</text></para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Additional types may be added from time to time, if they are of sufficient utility. Please check </text><text styleclass="Class Name" translate="true">ExternalStructure&apos;s</text><text styleclass="Normal" translate="true"> class comment for the latest details of all supported external call types.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Integer Range Checks</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">It should be noted that external call primitives fail when the actual argument for an integer typed argument is out of range. It is considered more within the spirit of Smalltalk to generate an error when something is out of range, than to silently truncate it. Indeed, for signed types in particular, truncation is unlikely to produce the correct result. In the case of return values, it is often the case, particularly with Win32™ routines (which are often coded in assembler in Windows95™), that a function which is specified as returning a </text><text styleclass="Class Name" translate="true">WORD</text><text styleclass="Normal" translate="true"> value, actually returns a </text><text styleclass="Class Name" translate="true">DWORD</text><text styleclass="Normal" translate="true"> value (as the return value is in EAX, and the function may not clear the high order 16-bits), so in this case silent truncation must occur.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The treatment of the unsigned integer </text><text styleclass="Class Name" translate="true">dword</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">qword</text><text styleclass="Normal" translate="true"> types is slightly inconsistent with other unsigned integer types, as they do not insist that their arguments are positive. This is because no promotion is necessary (i.e. there is no need to zero/sign extend) so this may offer more flexibility without being a significant source of errors. Experience has shown this approach to be useful.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Passing Null or Zero</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In general, the </text><text styleclass="Class Name" translate="true">UndefinedObject</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">nil</text><text styleclass="Normal" translate="true">, is interchangeable with 0, or NULL, at least when interfacing with external library functions. &apos;Nullness&apos; can be tested with the </text><text styleclass="Class Name" translate="true">#isNull</text><text styleclass="Normal" translate="true"> message, with the </text><text styleclass="Class Name" translate="true">UndefinedObject</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">SmallInteger</text><text styleclass="Normal" translate="true"> zero answering true. The </text><text styleclass="Class Name" translate="true">lpstr</text><text styleclass="Normal" translate="true"> argument type is an exception to this, in that it only accepts nil as the null pointer, not zero. This is designed to catch a wider range of type errors for string arguments, and can be avoided by simply using the looser </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> type if desired.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Invalid External Calls</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If an external call fails a walkback will occur describing which argument was incorrect. The error specifies what type of argument was actually passed, and which external type (e.g. </text><text styleclass="Class Name" translate="true">dword</text><text styleclass="Normal" translate="true">) was expected. When the external call primitive fails, the </text><text styleclass="Class Name" translate="true">#invalidCall</text><text styleclass="Normal" translate="true"> method of </text><text styleclass="Class Name" translate="true">ExternalLibrary</text><text styleclass="Normal" translate="true"> (or </text><text styleclass="Class Name" translate="true">ExternalStructure</text><text styleclass="Normal" translate="true"> in the case of a failing COM function invocation) an </text><text styleclass="Class Name" translate="true">InvalidExternalCall</text><text styleclass="Normal" translate="true"> exception is invoked, whereupon it which examines the primitive failure details for the process, and generates an appropriate exception. The exception will normally be an instance of </text><text styleclass="Class Name" translate="true">InvalidExternalCall</text><text styleclass="Normal" translate="true">, but in the case of a method returning a negative </text><text styleclass="Class Name" translate="true">HRESULT</text><text styleclass="Normal" translate="true"> (i.e. an error code) an </text><text styleclass="Class Name" translate="true">HRESULTError</text><text styleclass="Normal" translate="true"> exception will be raised instead.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Should the default error detection and handling prove inadequate or inappropriate, then one or other </text><text styleclass="Class Name" translate="true">#invalidCall</text><text styleclass="Normal" translate="true"> method can be overridden on a library or COM interface specific basis.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Another type of external call failure that one is quite likely to encounter, particularly during the early stages of interfacing to an external library, is Access Violations, or General Protection Faults. Dolphin will attempt to trap these and display a walkback. Frequently these are recoverable, particularly if resulting from the inability to read an area of memory, and one can continue regardless. One should bear in mind, however, that memory corruption might have occurred, and the image may be damaged in a way that is not immediately obvious. Consequently one must be particularly careful to maintain good image backups when doing external interfacing work.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Saving a corrupt image is possible after a GPF, but thankfully quite unlikely because a full compacting garbage collection is performed before the image save is initiated, and because this has to walk the entire object memory it typically stumbles on any corruption and fails. Such failures to complete a garbage collection show up as failure in </text><text styleclass="Class Name" translate="true">#primitiveCollectGarbage</text><text styleclass="Normal" translate="true">, usually with the code 2, and when this is encountered it is wise to abandon the image and start again from the last known good state.</text></para>
  </body>
</topic>

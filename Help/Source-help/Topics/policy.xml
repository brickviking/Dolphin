<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Policy</title>
  <keywords>
    <keyword translate="true">Policy</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Policy</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The behaviour of any object is defined by the methods in its class. You are creating a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newmethod" styleclass="Normal" translate="true">New Method</link><text styleclass="Normal" translate="true"> that implements an algorithm which is not specific to the class and could probably be re-used in other situations. How should you go about coding this situation for maximum flexibility?</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Encapsulate the implementation of the algorithm in its own class, which allows the algorithm to be pluggable and reuseable. So, don&apos;t hard code the algorithm directly in the class where it is used (the context). Instead, implement the algorithm in its own </text><text styleclass="Program Feature" translate="true">Policy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The end result will be that:</text></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">the algorithm can be reused in other contexts</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">a new algorithm can be swapped in in future causing minimal disruption</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">object behaviour can be configured on an instance basis, rather than by using subclassing (see </text><link displaytype="text" defaultstyle="true" type="topiclink" href="inheritancevs.composition" styleclass="Normal" translate="true">Inheritance vs Composition</link><text styleclass="Normal" translate="true">).</text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Consequences</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Program Feature" translate="true">Policy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">will require information about the context. This information is normally passed in the form of parameters to it&apos;s </text><link displaytype="text" defaultstyle="true" type="topiclink" href="instancecreationmethod" styleclass="Normal" translate="true">Instance Creation Method</link><text styleclass="Normal" translate="true">. The actual amount of information required by the policy object will depend on the algorithm being implemented so it may be appropriate for the context to pass itself to the instance creation method in order to give the policy full access to all of its details.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Example</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Imagine using a </text><text styleclass="Program Feature" translate="true">Policy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">to handle errors in an application. Errors should be handled differently depending on the type of user running the application. For example a user should be shown a polite message, whereas a developer will be shown the error code and the stack trace.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">An </text><link displaytype="text" defaultstyle="true" type="topiclink" href="abstractclass" styleclass="Normal" translate="true">Abstract Class</link><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Class Name" translate="true">ErrorPolicy</text><text styleclass="Normal" translate="true"> (a subclass of </text><text styleclass="Class Name" translate="true">Object</text><text styleclass="Normal" translate="true">) defines the protocol, which in this case, is just the </text><text styleclass="Class Name" translate="true">#error</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> method.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">ErrorPolicy&gt;&gt;error: anError</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;&quot;Handle the error event defined by anError.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;Overridden by concrete subclasses.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;^self subclassResponsibility</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The concrete subclasses </text><text styleclass="Class Name" translate="true">DeveloperErrorPolicy</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">TesterErrorPolicy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">UserErrorPolicy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">override the </text><text styleclass="Class Name" translate="true">#error</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> method in the following ways:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">UserErrorPolicy&gt;&gt;error: anError</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;&quot;Handle the error event defined by anError.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;Show the error message in a dialog box.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;...</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">TesterErrorPolicy&gt;&gt;error: anError</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;&quot;Handle the error event defined by anError.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;Show the error code and log it to a file.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;...</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">DeveloperErrorPolicy&gt;&gt;error: anError</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;&quot;Handle the error event defined by anError.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;Show the error code and dump the stacktrace.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;...</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The application selects the </text><text styleclass="Class Name" translate="true">ErrorPolicy</text><text styleclass="Normal" translate="true"> which is appropriate for the user.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">CommandPolicy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">is a policy class which defines how menu commands should be routed through the network of views and presenters to find their eventual point of action (command target).</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="inheritancevs.composition" styleclass="Normal" translate="true">Inheritance vs Composition</link></para>
  </body>
</topic>

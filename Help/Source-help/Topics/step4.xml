<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Step 4</title>
  <keywords>
    <keyword translate="true">Step 4</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Step 4</text></para>
    </header>
    <para styleclass="Normal"><image src="ApplicationDeploymentWizard_Page_4.png" scale="83.30%" styleclass="Normal"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">With the </text><text styleclass="Program Feature" translate="true">Strip redundant classes</text><text styleclass="Normal" translate="true"> option checked, the image stripper will attempt to find the network of all classes that are referenced from the contents of the root package. All other classes, that do not have instances or are not included in the set of required classes defined by </text><text styleclass="Class Name" translate="true">ImageStripper&gt;&gt;requiredClasses</text><text styleclass="Normal" translate="true">,</text><text styleclass="Normal" translate="true"> will be forcibly removed from the image.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note, if your application does not execute correctly then the problem may be that, for some reason, too many classes have been stripped from the image. Determining the underlying cause of this can be quite tricky and often turning off the </text><text styleclass="Program Feature" translate="true">Strip redundant classes</text><text styleclass="Normal" style="font-style:italic;" translate="true">&#32;</text><text styleclass="Normal" translate="true">option</text><text styleclass="Normal" translate="true"> is a simple solution that may work. The end result will, of course, be a larger deployed executable.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Program Feature" translate="true">Strip redundant methods </text><text styleclass="Normal" translate="true">option will inform the image stripper to remove all the methods from the image whose selectors are not referenced by any other method. Note that, because Smalltalk is a dynamically bound language, it is not possible to accurately determine whether a method will actually be called. For this reason, the redundant method stripping process errs on the side of caution and will leave methods in the image that can never be called simply because they have the same selector as one that can.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When removing redundant methods, the operation takes place in several passes and the image is scanned repeatedly until no further methods can be removed. Choosing this option will significantly increase the time taken to strip the image and, therefore, during initial deployment testing you may like to turn it off.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If you choose to </text><text styleclass="Program Feature" translate="true">Strip redundant methods</text><text styleclass="Normal" translate="true"> then you must be aware that any methods that do not appear to be referenced by others may be inadvertently removed. A typical situation where this might occur is in the use of a #</text><text styleclass="Class Name" translate="true">perform</text><text styleclass="Normal" translate="true">: that takes a composed symbol</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">as its argument. For example, </text><text styleclass="Class Name" translate="true">ValueAspectAdaptors</text><text styleclass="Normal" translate="true"> will compose their &quot;set&quot; selector by appending a $: to their specified &quot;get&quot; selector. In these cases the stripper might incorrectly remove the setter methods even though they can still be called. By choosing the option to </text><text styleclass="Program Feature" translate="true">Preserve aspects set methods</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">you inform the image stripper that all methods ending in a $:, that are paired with similarly named methods without the $:, are to be retained.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Normally, methods that are marked as #</text><text styleclass="Class Name" translate="true">deprecated</text><text styleclass="Normal" translate="true"> or #</text><text styleclass="Class Name" translate="true">shouldNotImplement</text><text styleclass="Normal" translate="true"> should not be called in a run-time application. Checking the appropriate boxes in this screen will ensure that these methods are all removed during stripping. Of course, it is always possible that you may be calling some deprecated methods, in which case you may wish to turn this option off until the situation is rectified.</text></para>
  </body>
</topic>

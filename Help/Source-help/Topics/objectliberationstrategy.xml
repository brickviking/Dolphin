<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Object Liberation Strategy</title>
  <keywords>
    <keyword translate="true">Object Liberation Strategy</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Object Liberation Strategy</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Some objects represent external </text><link displaytype="text" defaultstyle="true" type="topiclink" href="glossresources" styleclass="Normal" translate="true">resources</link><text styleclass="Normal" translate="true">. How can we ensure that these external resources are correctly reclaimed when the object is garbage collected.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">By convention, Dolphin adopts a number of methods associated with the termination of objects:</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#basicFree</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#free</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#finalize</text></para>
    <para styleclass="Class Name" style="margin-left:24px;"><text styleclass="Class Name" translate="true">#release</text></para>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">#basicFree</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">#basicFree</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">method should free (de-allocate) external resources owned by the receiver. After this has occurred the receiver is left in an invalid state and, as such, it is assumed that #</text><text styleclass="Class Name" translate="true">basicFree</text><text styleclass="Normal" translate="true"> can only be called once. So #</text><text styleclass="Class Name" translate="true">basicFree</text><text styleclass="Normal" translate="true">:</text></para>
    <list id="4" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">frees external resources</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">may leave the receiver in an invalid state</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">can only be called once</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">#free</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">#free</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">method should free external resources (typically by sending #</text><text styleclass="Class Name" translate="true">basicFree</text><text styleclass="Normal" translate="true">) and also nil the instance variables referencing those external resources. This will allow these objects to recreate their valid state (often using </text><link displaytype="text" defaultstyle="true" type="topiclink" href="lazyinitialization" styleclass="Normal" translate="true">Lazy Initialization</link><text styleclass="Normal" translate="true">) from the information contained in the receiver. Because the appropriate instance variables are nilled, </text><text styleclass="Class Name" translate="true">#free</text><text styleclass="Normal" translate="true"> can be sent to an object more than once. So #</text><text styleclass="Class Name" translate="true">free</text><text styleclass="Normal" translate="true">:</text></para>
    <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">generally calls #</text><text styleclass="Class Name" translate="true">basicFree</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">nils resource variables</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">allows the receiver to recreate its valid state (often lazily)</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">can be called more than once</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">#finalize</text></para>
    <para styleclass="Normal" style="margin-left:0px;"><text styleclass="Normal" translate="true">Finalizable objects receive the </text><text styleclass="Class Name" translate="true">#finalize</text><text styleclass="Normal" translate="true"> message (only once) just before certain death. Objects can be marked as finalizable by sending them the </text><text styleclass="Class Name" translate="true">#beFinalizable</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">message. </text><text styleclass="Class Name" translate="true">#finalize</text><text styleclass="Normal" translate="true"> should generally call #</text><text styleclass="Class Name" translate="true">basicFree</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">since there is no need to call </text><text styleclass="Class Name" translate="true">#free</text><text styleclass="Normal" translate="true"> as the object is about to die anyway</text><text styleclass="Normal" translate="true">.</text><text styleclass="Normal" translate="true"> Therefore #</text><text styleclass="Class Name" translate="true">finalize</text><text styleclass="Normal" translate="true">:</text></para>
    <list id="6" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">is received just before certain death</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">generally sends #</text><text styleclass="Normal" translate="true">basicFree</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">should only be sent by the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="glossfinalization" styleclass="Normal" translate="true">finalization</link><text styleclass="Normal" translate="true"> mechanism</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">is only sent once</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" style="text-decoration:underline;" translate="true">#release</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The intention of </text><text styleclass="Class Name" translate="true">#release</text><text styleclass="Normal" translate="true"> is that it should remove circular references and dependents from the receiver. This was a convention adopted by the early Smalltalk-80 systems where weak references were not available. Since it is not necessary to remove circular references which involve a weak reference, the introduction of </text><link displaytype="text" defaultstyle="true" type="topiclink" href="weakcollection" styleclass="Normal" translate="true">Weak Collections</link><text styleclass="Normal" translate="true"> has meant that </text><text styleclass="Class Name" translate="true">#release</text><text styleclass="Normal" translate="true"> is less useful in modern Smalltalk programming. So #</text><text styleclass="Class Name" translate="true">release</text><text styleclass="Normal" translate="true">:</text></para>
    <list id="7" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">removes circular references and dependents</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">is generally not that useful now that weak references are available</text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">GraphicsTool</text><text styleclass="Normal" translate="true"> is an abstract class which defines behaviour common to GDI objects (pens, brushes etc).</text></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">GraphicsTool</text><text styleclass="Normal" translate="true"> uses </text><link displaytype="text" defaultstyle="true" type="topiclink" href="lazyinitialization" styleclass="Normal" translate="true">Lazy Initialization</link><text styleclass="Normal" translate="true"> to create the external resource, and </text><link displaytype="text" defaultstyle="true" type="topiclink" href="objectliberationstrategy" styleclass="Normal" translate="true">Object Liberation Strategy</link><text styleclass="Normal" translate="true"> to free it.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">GraphicsTool&gt;&gt;handle</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Answer the receiver&apos;s handle. If unrealized then attempt to realize it first.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;handle isNil</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;ifTrue: [self realize].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^handle</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">GraphicsTool&gt;&gt;realize</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Realize (create) the external resource associated with the receiver,</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;but only if not already realized. Subclasses must implement #basicRealize&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^self isRealized</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;ifFalse: [</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;self</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;basicRealize;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;beFinalizable]</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">GraphicsTool&gt;&gt;basicRealize</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Realize (create) the external resource associated with the receiver, sent</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;from the public method, #realize, if not already realized.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^self subclassResponsibility</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">GraphicsTool&gt;&gt;free</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Free external resources held by the receiver, and leave in a state such</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;that the receiver will be re-realized the next time it is accessed.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;(self isRealized and: [self ownsHandle]) ifTrue: [</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;self beUnfinalizable.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;self basicFree.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;handle := nil]</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">GraphicsTool&gt;&gt;basicFree</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Free up external resources held by the receiver.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;GDILibrary default deleteObject: handle</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">finalize</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - The receiver is about to expire, so free any external resources. We use #free</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;rather than #basicFree just in case the receiver has been explicitly freed whilst it was</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;waiting in the finalize queue.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self free</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Class Name" translate="true">Brush</text><text styleclass="Normal" translate="true"> is the </text><text styleclass="Class Name" translate="true">GraphicsTool</text><text styleclass="Normal" translate="true"> subclass which represents Win32 GDI brushes:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Brush&gt;&gt;basicRealize</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Create the external brush resource associated with the receiver.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self ownsHandle</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;ifTrue: [self ownedHandle: self createHandle]</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">Brush&gt;&gt;createHandle</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Answer an external handle to a new brush as described by the logbrush structure.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^GDILibrary default createBrushIndirect: logbrush</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="weakcollection" styleclass="Normal" translate="true">Weak Collections</link><text styleclass="Normal" translate="true">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="finalization" styleclass="Normal" translate="true">Finalization</link></para>
  </body>
</topic>

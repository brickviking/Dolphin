<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Accessing Standard I/O Streams</title>
  <keywords>
    <keyword translate="true">Accessing Standard I/O Streams</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Accessing Standard I/O Streams</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Many console applications will want to do I/O, and often this will involve reading from the standard input stream (</text><text styleclass="Normal" translate="true">stdin</text><text styleclass="Normal" translate="true">) and writing to the standard output (</text><text styleclass="Normal" translate="true">stdout</text><text styleclass="Normal" translate="true">) and standard error (</text><text styleclass="Normal" translate="true">stderr</text><text styleclass="Normal" translate="true">) streams. These streams, collectively referred to as the </text><text styleclass="Normal" translate="true">stdio </text><text styleclass="Normal" translate="true">streams, can be accessed by sending the messages </text><text styleclass="Class Name" translate="true">#stdin</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#stdout</text><text styleclass="Normal" translate="true">, or </text><text styleclass="Class Name" translate="true">#stderr</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">to the session manager. The objects returned by these accessors implement standard Smalltalk stream protocols such as </text><text styleclass="Class Name" translate="true">#next</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#nextPut</text><text styleclass="Normal" translate="true">:, </text><text styleclass="Class Name" translate="true">#nextPutAll</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#cr</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">#tab</text><text styleclass="Normal" translate="true">, For example the </text><text styleclass="Program Feature" translate="true">Hello Word (Console)</text><text styleclass="Normal" translate="true"> application is implemented as follows (from the </text><text styleclass="Class Name" translate="true">CommandLineHelloWorld</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class):</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">main</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">&quot;Implement the main body of the Headless Hello World application</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">by printing that familiar greeting to the standard output stream.&quot;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">self stdout</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">nextPutAll: &apos;Hello World!&apos;; cr; flush.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">self stderr</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">nextPutAll: &apos;Press &lt;Enter&gt; to exit:&apos;; flush.</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">self stdin nextLine</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This uses all three </text><text styleclass="Normal" translate="true">stdio </text><text styleclass="Normal" translate="true">streams, mainly for illustrative purposes. The streams are instances of the </text><text styleclass="Class Name" translate="true">StdioFileStream</text><text styleclass="Normal" translate="true">, and are connected to </text><text styleclass="Normal" translate="true">stdio </text><text styleclass="Normal" translate="true">streams implemented by the C runtime library (CRT). Note that it is necessary to flush the output streams before any output actually appears because they are buffered by the CRT.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The standard I/O streams are in fact connected to the same streams as used by the CRT and the underlying operating system. Thus if the streams are redirected from the command line, then the input or output from Dolphin will be redirected too. Furthermore, calls to the C runtime library stdio functions such as </text><text styleclass="Class Name" translate="true">gets</text><text styleclass="Normal" translate="true">() and </text><text styleclass="Class Name" translate="true">printf</text><text styleclass="Normal" translate="true">() will result in input or output to or from the same stream. This makes it possible to employ external libraries that use the standard I/O streams in a completely integrated manner.</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Creating an Instance</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Creating an Instance</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">When </text><text styleclass="Class Name" translate="true">CoCreateInstance</text><text styleclass="Normal" translate="true">() is called with standard arguments, COM will apply an order of preference to the available sources of the requested component, as follows:</text></para>
    <list id="3" type="ol" listtype="decimal" formatstring="&#37;&#115;&#46;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Registered class factory</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">In-process server</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Local server</text></li>
      <li styleclass="Normal"><text styleclass="Normal" translate="true">Remote server (on another machine)</text></li>
    </list>
    <para></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Thus if one has run up a Dolphin development image in which a class factory for the component is registered (i.e. with </text><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;registerClassFactory</text><text styleclass="Normal" translate="true">), then it will service all requests for components made by any client, including in-process component requests and those made by itself (hence the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Debugging_In-image" styleclass="Normal" translate="true">in-image</link><text styleclass="Normal" translate="true"> mode).</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Assuming that an instance of the server is not already running, then the next most favoured is the in-process implementation. Since </text><text styleclass="Class Name" translate="true">COMInterfaceImp&gt;&gt;register</text><text styleclass="Normal" translate="true"> creates both </text><text styleclass="Class Name" translate="true">InProcServer32</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">LocalServer32</text><text styleclass="Normal" translate="true"> keys, COM will always attempt to launch the Dolphin server in-process (using the </text><text styleclass="Program Feature" translate="true">IPDolphin.DLL</text><text styleclass="Normal" translate="true"> stub) unless the client has specifically </text><text styleclass="Normal" style="font-weight:bold; font-style:normal;" translate="true">excluded</text><text styleclass="Normal" translate="true"> the </text><text styleclass="Class Name" translate="true">CLSCTX_INPROC_SERVER</text><text styleclass="Normal" translate="true"> flag when calling </text><text styleclass="Class Name" translate="true">CoCreateInstance</text><text styleclass="Normal" translate="true">(). Many client environments do not expose this level of detail in the language and thus one frequently has no control over the type of server requested. Consequently it can be difficult not to pick up the in-process implementation. Furthermore if one is attempting to use a Dolphin image to load a Dolphin client for debugging, then this will result in the Dolphin client crashing because of the limitation that the VM can only load a single image into each process (see </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Client_Limitation" styleclass="Normal" translate="true">above</link><text styleclass="Normal" translate="true">). For these reasons it is a good idea to omit or remove the </text><text styleclass="Class Name" translate="true">InProcServer32</text><text styleclass="Normal" translate="true"> key when attempting to debug in out-of-process mode. This can be achieved by registering the </text><text styleclass="Class Name" translate="true">COMInterfaceImp</text><text styleclass="Normal" translate="true"> subclass for the local server context only:</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">COMRandomStream </text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">unregister; </text></para>
    <para styleclass="Code Example"><tab /><tab /><text styleclass="Code Example" translate="true">register: (OLEConstants at: #CLSCTX_LOCAL_SERVER).</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Class Name"><text styleclass="Class Name" translate="true">Having registered the COMRandomStream sample as a local server only, try evaluating the following:</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">COMRandomStream unregisterClassFactory. “Prevent client servicing own request ”</text></para>
    <para styleclass="Code Example"><tab /><text styleclass="Code Example" translate="true">r := IRandomStream new.</text></para>
    <para styleclass="Code Example"></para>
    <para></para>
    <para styleclass="Class Name"><text styleclass="Class Name" translate="true">You may get an error message similar to the following (the path to the image may be different):</text></para>
    <para styleclass="Normal"><image src="_img2.bmp" scale="100.00%" styleclass="Normal"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If you do get this error then the client will also lock up until a certain timeout period has passed. Eventually it will pop up a walkback similar to the following:</text></para>
    <para styleclass="Normal" style="margin-left:0px;"><image src="_img3.bmp" scale="100.00%" styleclass="Normal"></image><tab /></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This is the error (</text><text styleclass="Class Name" translate="true">CO_E_APPDIDNTREG: 0x80080005 </text><text styleclass="Class Name" translate="true">–</text><text styleclass="Class Name" translate="true"> “Server execution failed”</text><text styleclass="Normal" translate="true">) you can expect to see when the server COM launches but shuts down before registering any class factories, or fails to register a class factory for the </text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true"> requested by the client.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">This will occur if the </text><text styleclass="Class Name" translate="true">LocalServer32</text><text styleclass="Normal" translate="true"> registry entry is incorrect. The </text><link displaytype="text" defaultstyle="true" type="topiclink" href="The_Image_Key" styleclass="Normal" translate="true">Image key</link><text styleclass="Normal" translate="true"> cannot be used when debugging out-of-process, because at the time a local server is started it does not know which components it will be expected to service. Indeed a local server is expected to register class factories for all the components that it is able to service. Essentially COM launches the executable as a new process with the /</text><text styleclass="Class Name" translate="true">Embedding</text><text styleclass="Normal" translate="true"> command line argument. It then waits a while to give the server the chance to register its class factories, at which point it can proceed to invoke the relevant class factory (if any). The command line </text><text styleclass="Normal" style="font-weight:bold; font-style:normal;" translate="true">must</text><text styleclass="Normal" translate="true">, therefore, include the full and correct image path. The path must be quoted if it contains spaces. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;register</text><text styleclass="Normal" translate="true">[:] method should create a correctly formed key, but if it doesn</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">t you may need to edit it manually. Alternatively you can save an image where the launcher will find it (i.e. at the path specified in the error message box).</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If/when the </text><text styleclass="Class Name" translate="true">LocalServer32</text><text styleclass="Normal" translate="true"> registry entry is correct then the development system will start up in headless mode, and you should see the Dolphin splash screen. The client may still lock up and eventually pop up another walkback. The error may be the same as above, or the slightly more helpful </text><text styleclass="Class Name" translate="true">CO_E_APPDIDNTREG: 0x800401FE </text><text styleclass="Class Name" translate="true">–</text><text styleclass="Class Name" translate="true"> “Application was launched but it didn&apos;t register a class factory</text><text styleclass="Normal" translate="true">”.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If the server process is launching (the splash screen pops up), but the client still experiences the above error, this will probably be because the server image has been saved down without any class factory registration. If a class factory is not registered in the Dolphin image then when it starts it will not register a class factory object with COM. This error is quite easy to cause if one is attempting to use the same image as the test client and the server because in the client the class factory must not be registered.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">We can fix this in this case by following sequence of steps:</text></para>
    <list id="4" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">COMRandomStream registerClassFactory </text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Save image again</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">COMRandomStream unregisterClassFactory </text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Finally try creating an </text><text styleclass="Class Name" translate="true">IRandomStream</text><text styleclass="Normal" translate="true"> again, and this time it should work. If not you might get the following walkback because the type library is not correctly registered:</text></para>
    <para styleclass="Normal"><image src="_img4.bmp" scale="100.00%" styleclass="Normal"></image></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">If this occurs, try registering the type library, either using the command specifically intended for this purpose (</text><text styleclass="Menu Command" translate="true">Register Type Library</text><text styleclass="Normal" translate="true"> on the </text><text styleclass="Menu Command" translate="true">Additional Tools</text><text styleclass="Normal" translate="true"> menu), or implicitly by browsing the library using the </text><text styleclass="Program Feature" translate="true">Active-X Component Wizard</text><text styleclass="Normal" translate="true">. Note that when you deploy an Active-X DLL on NT/2000//2003/XP you can arrange for the type-library to be bound into the DLL, in which case it does not need to be shipped separately, and furthermore it will be self-registered by the DLL.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Obviously one should avoid using the same actual image for the test client as the test server but we went through these steps to illustrate some of the most common errors one sees. To recap:</text></para>
    <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">If using a Dolphin development image as a test client, ensure it has </text><text styleclass="Normal" style="font-weight:bold; font-style:normal;" translate="true">not</text><text styleclass="Normal" translate="true"> registered a class factory for the coclass (</text><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;unregisterClassFactory</text><text styleclass="Normal" translate="true">).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Ensure that the development stubs are registered as the implementations for the CLSID in the registry (</text><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;register:</text><text styleclass="Normal" translate="true">), but</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Make sure there is no </text><text styleclass="Class Name" translate="true">InProcServer32</text><text styleclass="Normal" translate="true"> key registered for the coclass</text><text styleclass="Normal" translate="true">’</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Class Name" translate="true">CLSID</text><text styleclass="Normal" translate="true">, as otherwise COM will attempt to use that in preference. This will crash a Dolphin client, and launch the image in-process for other clients. The best way to achieve this is to </text><text styleclass="Class Name" translate="true">#unregister</text><text styleclass="Normal" translate="true"> and the </text><text styleclass="Class Name" translate="true">#register</text><text styleclass="Normal" translate="true">: specifying only </text><text styleclass="Class Name" translate="true">CLSCTX_LOCAL_SERVER</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Make sure the </text><text styleclass="Class Name" translate="true">LocalServer32</text><text styleclass="Normal" translate="true"> registry entry for the class is specifying the correct image path.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Make sure the server development image does have a class factory registered (</text><text styleclass="Class Name" translate="true">COMInterfaceImp class&gt;&gt;registerClassFactory</text><text styleclass="Normal" translate="true">)</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Ensure that </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Marshalling" styleclass="Normal" translate="true">marshalling</link><text styleclass="Normal" translate="true"> support is available.</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">All being well the server should start, the instance creation request will be serviced, and an interface pointer returned to the client. </text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">External Libraries</title>
  <keywords>
    <keyword translate="true">External Libraries</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">External Libraries</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In Smalltalk everything is (or should be) an object, and methods should be invoked by sending messages to objects. </text><text styleclass="Normal" translate="true">Consequently we represent external libraries with classes in Dolphin, and wrap each function we wish to call in a particular library in a method (an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethods" styleclass="Normal" translate="true">ExternalMethod</link><text styleclass="Normal" translate="true">) that describes the types of the parameters the external function call is expecting. So each separate external library has a class (a subclass of ExternalLibrary) whose methods represent the external functions. The </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externallibrary" styleclass="Normal" translate="true">External Library</link><text styleclass="Normal" translate="true"> pattern details the steps necessary to create one of these beasties.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The concept of &quot;types&quot; in Smalltalk is controversially somewhat different than that of Java, C/C++, and many other languages. Smalltalk objects carry their type along with them, and respond to messages in an appropriate manner. This is known as </text><text styleclass="Program Feature" translate="true">dynamic typing</text><text styleclass="Normal" translate="true">. We typically group a set of messages (and the behaviour expected when those messages are acted upon) into a &quot;</text><link displaytype="text" defaultstyle="true" type="topiclink" href="glossmessageprotocol" styleclass="Normal" translate="true">protocol</link><text styleclass="Normal" translate="true">&quot;. Protocols are independent of any particular class. Protocols are arguably the nearest thing to types in Smalltalk, not classes. Furthermore, Smalltalk variables (including parameters) are typeless: When the only thing one can do to an object is to send it messages, one doesn&apos;t care about its internal representation, or its class, only whether it correctly responds to a given protocol. When calling external functions, however, we must map Smalltalk objects to a notion of types that does include representation, because, in the external world,&quot;type&quot; generally specifies representation. Dolphin achieves this mapping by including type information in a special form of primitive </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodformat" styleclass="Normal" translate="true">method format</link><text styleclass="Normal" translate="true">, and by performing appropriate type conversions.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The external call interface primitives provide automatic conversion of objects for parameters and return values of the following types:</text></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Signed (two&apos;s complement) and unsigned integers of 8, 16, 32, and 64 bits</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Single (32-bit) and double (64-bit) precision floating point numbers</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Characters</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Strings</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Booleans</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Handles</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Pointers</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Structures (pass and return by value, or by reference)</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">GUIDs</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Active-X Automation types (BSTR, VARIANT, VARIANT_BOOL)</text></li>
    </list>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The precise set of parameter types, and the automatic conversion and validation applied are documented in </text><link displaytype="text" defaultstyle="true" type="topiclink" href="parametertypes.validationandconversion" styleclass="Normal" translate="true">Parameter Types, Validation and Conversion</link><text styleclass="Normal" translate="true"> (though it is recommended </text><text styleclass="Class Name" translate="true">ExternalDescriptor</text><text styleclass="Normal" translate="true">&apos;s class comment be perused to check the latest set and their corresponding validation rules). For example, Dolphin </text><text styleclass="Class Name" translate="true">Strings</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">are null-terminated, so they can be safely passed to C/C++ functions as C strings (the null-terminator is not included in the size a </text><text styleclass="Class Name" translate="true">String</text><text styleclass="Normal" translate="true"> answers when one sends it the </text><text styleclass="Class Name" translate="true">#size</text><text styleclass="Normal" translate="true"> message) using the </text><text styleclass="Class Name" translate="true">lpstr</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">or </text><text styleclass="Class Name" translate="true">lpvoid</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">types.</text></para>
  </body>
</topic>

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Variables and Assignments</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Variables and Assignments</text></para>
    </header>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">So far, we have been evaluating individual Smalltalk expressions and displaying the results. A Smalltalk program of any real value must consist of many such expressions and, for them to be useful, it&apos;s going to be important to store the results somewhere. All computer languages use variables in which to place intermediate values so that they can be retrieved at a later time.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">In Smalltalk, a variable is a named slot or placeholder into which any object can be stored. A variable name must begin with a letter but subsequently, may consist of any letter, number or underscore characters. The following are valid variable names:</text></para>
    <para styleclass="Class Name"><text styleclass="Class Name" translate="true">name</text><br/><text styleclass="Class Name" translate="true">address</text><br/><text styleclass="Class Name" translate="true">dayOfWeek</text><br/><text styleclass="Class Name" translate="true">outerCount2</text><br/><text styleclass="Class Name" translate="true">day_of_week</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Although the last variable, </text><text styleclass="Class Name" translate="true">day_of_week</text><text styleclass="Normal" translate="true">, is a valid name, in Smalltalk it is conventional to compose this without the underscore characters but by capitalizing subsequent words. Thus, </text><text styleclass="Class Name" translate="true">dayOfWeek</text><text styleclass="Normal" translate="true"> would be the preferred name.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You can store an object into a variable using an assignment. Try the following breakdown of Pythagoras&apos; theorem. If you wish, you can just evaluate (using </text><text styleclass="Menu Command" translate="true">Ctrl+E</text><text styleclass="Normal" translate="true">) the first few lines and only display the answer (using </text><text styleclass="Menu Command" translate="true">Ctrl+D</text><text styleclass="Normal" translate="true">) for the last line.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">a := 6.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">b := 7.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">hypotenuseSquared := a squared + b squared. &quot;By Pythagoras&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">hypotenuse := hypotenuseSquared sqrt.</text><text style="font-family:&apos;Courier New&apos;; font-size:10pt; color:#000000;" translate="true">&#32;</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Perhaps you&apos;ve noticed something else new here in addition to the use of the assignment (:=) operator. The Smalltalk language uses a full stop or period (.) to separate individual expressions. Now you can evaluate several expressions in one go. Try the above example again but this time select all of the text before asking to display the result.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">One thing that is different between Smalltalk variables and those used in other languages is that they are un-typed. A Smalltalk variable is just a slot capable of holding any object; you do not have to declare a variable as being able to hold only a particular type. This makes Smalltalk variables very much easier to use and, in the end, more flexible. </text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">Tip: the un-typed nature of Smalltalk variables is often cited as an indication that Smalltalk is not a &quot;safe&quot; language. Languages with strongly typed variables, that insist on a variable being declared as able to hold only a particular type of value, are seen as being safer because the compiler can perform more checks and therefore reduce the number of problems that arise at runtime. </text></para>
    <para styleclass="Notes"><text styleclass="Notes" translate="true">However, Smalltalk IS eminently type safe. Even if an incorrect class of object is placed in a variable slot, the problem will not go unnoticed during runtime testing. The object will not respond to the same set of messages that will be expected of it and will throw up a Walkback dialog when an unsuitable message is not understood. </text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Dolphin Smalltalk supports three different types of variables, </text><text styleclass="Program Feature" translate="true">Workspace</text><text styleclass="Normal" translate="true">, </text><text styleclass="Program Feature" translate="true">Temporary</text><text styleclass="Normal" translate="true">, </text><text styleclass="Program Feature" translate="true">Instance</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Program Feature" translate="true">Global</text><text styleclass="Normal" translate="true">.</text></para>
  </body>
</topic>

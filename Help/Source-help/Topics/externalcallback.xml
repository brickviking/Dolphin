<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">External Callback</title>
  <keywords>
    <keyword translate="true">External Callback</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">External Callback</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Interfacing with external software systems involves not only calling externally implemented functions, but also implementing functions to be used by external systems (callbacks). We need a generic mechanism for implementing callbacks from other languages in Smalltalk.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Implement an </text><text styleclass="Class Name" translate="true">ExternalCallback</text><text styleclass="Normal" translate="true"> block which can be passed like a function pointer to external systems to enable them to call back into Dolphin. The steps are given below but see the section on </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalcallbacks" styleclass="Normal" translate="true">External Callbacks</link><text styleclass="Normal" translate="true"> for further information.</text></para>
    <list id="3" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Define any new </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalstructures" styleclass="Normal" translate="true">External Structure</link><text styleclass="Normal" translate="true"> classes for any structure or pointer parameters you are going to use in the callback block which are not already defined.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Define a block with the correct number of arguments for the callback procedure, inside which you implement your callback functionality. The block can contain whatever code is necessary to implement the callback. For many callbacks, the return value is important, e.g. to continue or terminate enumerations. The return value is the result of the last expression in the block, and should be an object with a conversion to 32-bit integer when sent </text><text styleclass="Class Name" translate="true">#asLRESULT</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">You may need to add an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalmethodselector" styleclass="Normal" translate="true">External Method Selector</link><text styleclass="Normal" translate="true"> to the appropriate </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externallibrary" styleclass="Normal" translate="true">External Library</link><text styleclass="Normal" translate="true"> to enable you to register your callback function. Use an </text><text styleclass="Normal" translate="true">lpvoid</text><text styleclass="Normal" translate="true"> parameter type for the callback argument (the function pointer), and send the external callback the </text><text styleclass="Normal" translate="true">#asParameter</text><text styleclass="Normal" translate="true"> message to persuade it to answer its machine code thunk.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Define an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="parametertypes.validationandconversion" styleclass="Normal" translate="true">argument descriptor string</link><text styleclass="Normal" translate="true"> describing the callbacks parameter types mapped to the appropriate validation. The type string does not include the return type (the result answered by the block will be sent the </text><text styleclass="Class Name" translate="true">#asLRESULT</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">message for conversion to a 32-bit return value, the only possible return type at present).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Create an </text><text styleclass="Class Name" translate="true">ExternalCallback</text><text styleclass="Normal" translate="true"> instance using the </text><text styleclass="Normal" translate="true">#block:argumentTypes:</text><text styleclass="Normal" translate="true"> message, passing (respectively) the callback block and the argument descriptor string. You must retain a reference to this external callback object to prevent it being garbage collected, as although the </text><text styleclass="Class Name" translate="true">ExternalCallback</text><text styleclass="Normal" translate="true"> class maintains a register of its instances, the register is a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="weakcollection" styleclass="Normal" translate="true">Weak Collection</link><text styleclass="Normal" translate="true">.</text></li>
    </list>
    <list id="4" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:48px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:48px;"><text styleclass="Normal" translate="true">If the callback is for the use of a control (or some other type of window) which has a </text><text styleclass="Class Name" translate="true">SendMessage</text><text styleclass="Normal" translate="true">()</text><text styleclass="Normal" translate="true"> interface, then you may need to define an appropriate </text><link displaytype="text" defaultstyle="true" type="topiclink" href="externalstructures" styleclass="Normal" translate="true">External Structure</link><text styleclass="Normal" translate="true"> for a parameter block, or you may have to pass the external callback directly as the </text><text styleclass="Normal" translate="true">lParam</text><text styleclass="Normal" translate="true">.</text></li>
      <li styleclass="Normal" style="margin-left:48px;"><text styleclass="Normal" translate="true">If a particular callback is frequently created, then consider using a pre-created </text><text styleclass="Class Name" translate="true">ExternalDescriptor</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">(which holds a &quot;compiled&quot; representation of the argument type string) in conjunction with the </text><text styleclass="Normal" translate="true">ExternalCallback&gt;&gt;block:descriptor:</text><text styleclass="Normal" translate="true"> instantiator. This technique is illustrated in the example below.</text></li>
    </list>
    <list id="3" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" levelreset="false" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Arial; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Pass your external callback object to the library method you defined, and wait for the callbacks to come pouring in!</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">When you&apos;ve finished with the callback, you can explicitly </text><text styleclass="Normal" translate="true">#free</text><text styleclass="Normal" translate="true"> it. If you&apos;re not sure when you&apos;ll have finished with it, then simply leave it to be finalized when Dolphin garbage collects it.</text></li>
    </list>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Examples</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">An important callback example in the development system is that implemented for streaming text out of a rich edit control in </text><text styleclass="Class Name" translate="true">RichTextEdit</text><text styleclass="Normal" translate="true">. </text><text styleclass="Class Name" translate="true">RichTextEdit</text><text styleclass="Normal" translate="true"> actually defines two callbacks (one for streaming in, and one for streaming out), but that for streaming out is as follows:</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true">streamIn: aStream format: streamFormat</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;Private - Read text from the stream aStream&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;| answer callback text size |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;callback :=</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;ExternalCallback</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;block: [ :dwCookie :pbBuff :cb :pcb |</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;text := aStream nextAvailable: cb.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;size := text size.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;pbBuff replaceFrom: 1 to: size with: text startingAt: 1.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;pcb value: size.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;0</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160; &#160; &#160;descriptor: ##(ExternalDescriptor argumentTypes: &apos;dword lpvoid sdword DWORD*&apos;).</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;winStruct</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160; &#160; &#160;pfnCallback: callback asParameter yourAddress.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;answer := self sendMessage: EM_STREAMIN wParam: streamFormat lpParam: winStruct.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self setModify: false.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;&quot;It seems we have to increase the limit again after streaming in.&quot;</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;self setMaxTextLimit.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;streamIn isNil ifFalse: [streamIn free].</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;streamIn := callback.</text></para>
    <para styleclass="Code Example"><text styleclass="Code Example" translate="true"> &#160; &#160;^answer</text></para>
    <para styleclass="Code Example"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Notice how the arguments to the block are already objects of suitable types, and can be used directly, even the </text><text styleclass="Class Name" translate="true">DWORD</text><text styleclass="Normal" translate="true">*</text><text styleclass="Normal" translate="true"> parameter.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Like any other block, the callback block captures the environment in which it was created, so we can directly reference all the closure information we need (e.g. the argument to the method, </text><text styleclass="Class Name" translate="true">aStream</text><text styleclass="Normal" translate="true">)</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The interface to the rich edit control is </text><text styleclass="Class Name" translate="true">SendMessage</text><text styleclass="Normal" translate="true">() based, and so uses a parameter block to hold the function pointer and cookie (&quot;extra data&quot; or closure information). We don&apos;t need the cookie, so we just pass 0, and ignore the argument in the callback block.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:24px; font-family:Symbol; font-size:9pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Class Name" translate="true">RichTextEdit</text><text styleclass="Normal" translate="true"> control RTF streaming (as in the previous example).</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Enumeration of </text><text styleclass="Normal" translate="true">Locale </text><text styleclass="Normal" translate="true">specific time and date formats.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Enumeration of </text><text styleclass="Normal" translate="true">Font</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">characteristics.</text></li>
      <li styleclass="Normal" style="margin-left:24px;"><text styleclass="Normal" translate="true">Enumerating top-level </text><text styleclass="Normal" translate="true">Views</text></li>
    </list>
  </body>
</topic>

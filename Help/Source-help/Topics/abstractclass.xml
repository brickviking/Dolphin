<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Abstract Class</title>
  <keywords>
    <keyword translate="true">Abstract Class</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Abstract Class</text></para>
    </header>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Context</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">You are implementing a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="newclass" styleclass="Normal" translate="true">New Class</link><text styleclass="Normal" translate="true"> and discover that you are adding methods that are identical to those in an already existing sibling class. How is it possible to reuse the implementation of these methods to avoid the unnecessary duplication and the additional maintenance load this incurs.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Solution</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">It should be possible to </text><text styleclass="Normal" translate="true">refactor</text><text styleclass="Normal" translate="true"> the local class hierarchy to arrange that the two (or more) classes each become a specialisation of a common superclass. However, in doing so it may be that the new superclass does not contain enough state to ever be instantiable in its own right. That is, this class is one that can never realistically have instances of its own. Such a class is called an </text><text styleclass="Program Feature" translate="true">Abstract Class</text><text styleclass="Normal" translate="true">.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">It is common for an abstract class to define the common representation and/or behaviour of its concrete subclasses. However, sometimes it is not possible to implement the common methods at this level and they must be deferred to the </text><text styleclass="Normal" translate="true">Concrete Subclasses</text><text styleclass="Normal" translate="true">. In these situations it is usual to define the common methods using stub methods. These stub methods in the abstract class demonstrate the method protocol that the subclasses must provide and serve as a placeholder for </text><link displaytype="text" defaultstyle="true" type="topiclink" href="methodcomment" styleclass="Normal" translate="true">Method Comments</link><text styleclass="Normal" translate="true"> describing the protocol. The stub methods should contain a </text><text styleclass="Class Name" translate="true">#subclassResponsibility</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">message send.</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Example</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Imagine two new classes: </text><text styleclass="Class Name" translate="true">CurrentAccount</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">SavingsAccount</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">with the following attributes:</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">CurrentAccount (number, balance, cheques)</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">SavingsAccount (number, balance, interestRate)</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">number</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">balance</text><text styleclass="Normal" translate="true"> attributes are common to both classes. We can create an abstract class </text><text styleclass="Class Name" translate="true">BankAccount</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">to implement these common attributes (and their corresponding methods), and subclass </text><text styleclass="Class Name" translate="true">SavingsAccount</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">CurrentAccount</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">from it.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">BankAccount (number, balance)</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">SavingsAccount (interestRate)</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">CurrentAccount (cheques)</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Known Uses</text></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The </text><text styleclass="Class Name" translate="true">Boolean</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class is an abstract class with two concrete subclasses: </text><text styleclass="Class Name" translate="true">True</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">False</text><text styleclass="Normal" translate="true">. The </text><text styleclass="Class Name" translate="true">Boolean</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">class implements behaviour common to </text><text styleclass="Class Name" translate="true">True</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Class Name" translate="true">False</text><text styleclass="Normal" translate="true"> (</text><text styleclass="Class Name" translate="true">#asBoolean, #deepCopy</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">etc). It also defines the protocol which is common to </text><text styleclass="Class Name" translate="true">True</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">and </text><text styleclass="Class Name" translate="true">False</text><text styleclass="Normal" translate="true">&#32;</text><text styleclass="Normal" translate="true">but which will be implemented by them (</text><text styleclass="Class Name" translate="true">#and</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true">, </text><text styleclass="Class Name" translate="true">#ifTrue</text><text styleclass="Normal" translate="true">:</text><text styleclass="Normal" translate="true"> etc).</text></para>
    <para styleclass="Normal Head"><text styleclass="Normal Head" translate="true">Related Patterns</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="inheritancevs.composition" styleclass="Normal" translate="true">Inheritance vs Composition</link></para>
  </body>
</topic>
